2024-04-29 13:20:22 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22"
2024-04-29 13:20:22 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4), T.int64(112), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:20:22 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:20:22 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(28), T.int64(4), T.int64(3), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_1 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ow_0 * T.int64(7) + ow_1 + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(56), oc_chunk_0 * T.int64(28) + oc_chunk_1 * T.int64(28) + oc_chunk_2 * T.int64(28) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 28])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[7, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:22 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(28), T.int64(4), T.int64(9), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_1 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ow_0 * T.int64(7) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(1)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(56), oc_chunk_0 * T.int64(28) + oc_chunk_1 * T.int64(28) + oc_chunk_2 * T.int64(28) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(28), T.int64(2), T.int64(1), T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(56), oc_chunk_0 * T.int64(28) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 28])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[7, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:22 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0 in T.grid(T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1)):
                    for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(56), oc_chunk_0 * T.int64(28) + oc_chunk_1 * T.int64(28) + oc_chunk_2 * T.int64(28) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(28), T.int64(14), T.int64(7), T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(56), oc_chunk_0 * T.int64(28) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 28])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[7, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 14:03:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:03:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:03:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 12 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 14:03:16 [INFO] [evolutionary_search.cc:723] Sampled 500 candidate(s)
2024-04-29 14:03:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 5 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 14:03:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 14:03:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 14:03:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 14:03:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9998  0.9996  0.9986  0.9982  0.9975  0.9973  0.9970  0.9962  0.9959  0.9939  0.9933  0.9929  0.9925  0.9920
[17 : 32]:	0.9919  0.9914  0.9914  0.9909  0.9902  0.9897  0.9895  0.9894  0.9893  0.9892  0.9889  0.9886  0.9882  0.9879  0.9879  0.9875
[33 : 48]:	0.9868  0.9866  0.9863  0.9856  0.9855  0.9850  0.9848  0.9847  0.9836  0.9829  0.9827  0.9825  0.9803  0.9794  0.9792  0.9784
[49 : 64]:	0.9769  0.9761  0.9759  0.9755  0.9751  0.9747  0.9744  0.9744  0.9743  0.9743  0.9739  0.9737  0.9736  0.9733  0.9733  0.9728
2024-04-29 14:03:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:03:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #1: GFLOPs: 101.3002. Time: 874.6108 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #2: GFLOPs: 60.0404. Time: 1475.6435 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #3: GFLOPs: 27.6423. Time: 3205.1722 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #4: GFLOPs: 45.8515. Time: 1932.2882 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #5: GFLOPs: 13.2459. Time: 6688.7071 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #6: GFLOPs: 5.0743. Time: 17460.2420 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #7: GFLOPs: 22.7786. Time: 3889.5380 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #8: GFLOPs: 37.9385. Time: 2335.3143 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #9: GFLOPs: 10.0647. Time: 8802.8395 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #10: GFLOPs: 29.8483. Time: 2968.2872 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #11: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_fused * T.int64(28) + oc_chunk_1 * T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(112), T.int64(3), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_fused * T.int64(28) + oc_chunk_1 * T.int64(7) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(112), ic_0 + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(15) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(28), T.int64(14), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_fused * T.int64(28) + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 7, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[112, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b108)
b134 = sch.decompose_reduction(block=b108, loop=l118)
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #12: GFLOPs: 68.0260. Time: 1302.4175 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #13: GFLOPs: 11.9661. Time: 7404.1251 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #14: GFLOPs: 5.3763. Time: 16479.5069 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #15: GFLOPs: 62.0520. Time: 1427.8066 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #16: GFLOPs: 13.2870. Time: 6668.0328 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #17: GFLOPs: 45.1030. Time: 1964.3538 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #18: GFLOPs: 34.5995. Time: 2560.6820 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #19: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(28), T.int64(9)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), oh_1 * T.int64(7) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(14) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(14), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(14) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 14, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 14])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l109)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b70)
l116 = sch.fuse(l114, l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b117)
b140 = sch.decompose_reduction(block=b117, loop=l124)
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #20: GFLOPs: 29.1755. Time: 3036.7308 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #21: GFLOPs: 7.0448. Time: 12576.3920 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #22: GFLOPs: 90.8855. Time: 974.8337 us. Best GFLOPs: 101.3002
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #23: GFLOPs: 104.1993. Time: 850.2773 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(28), T.int64(9)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(56), oc_chunk_1 * T.int64(56) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(56), oc_chunk_1 * T.int64(56) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(56), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 28, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[7, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b115)
b140 = sch.decompose_reduction(block=b115, loop=l124)
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(448)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(28), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(112), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(112), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(14), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 7, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[112, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l119)
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #26: GFLOPs: 64.5645. Time: 1372.2433 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #27: GFLOPs: 24.1100. Time: 3674.7518 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #28: GFLOPs: 37.3326. Time: 2373.2118 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #29: GFLOPs: 5.3479. Time: 16566.8197 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #30: GFLOPs: 19.3088. Time: 4588.4830 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #31: GFLOPs: 3.0453. Time: 29093.4797 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #32: GFLOPs: 42.0000. Time: 2109.4829 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #33: GFLOPs: 77.8951. Time: 1137.4043 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #34: GFLOPs: 3.1426. Time: 28192.9985 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #35: GFLOPs: 19.0796. Time: 4643.6014 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #36: GFLOPs: 28.4278. Time: 3116.6045 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #37: GFLOPs: 3.3858. Time: 26167.7855 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #38: GFLOPs: 16.5021. Time: 5368.9120 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #39: GFLOPs: 84.3684. Time: 1050.1354 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #40: GFLOPs: 5.4438. Time: 16275.0851 us. Best GFLOPs: 104.1993
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #41: GFLOPs: 120.6515. Time: 734.3322 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #42: GFLOPs: 25.5319. Time: 3470.0975 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #43: GFLOPs: 108.1949. Time: 818.8763 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #44: GFLOPs: 4.4993. Time: 19691.5163 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(448)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(28), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(14) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(14), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 14, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 14])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l74, l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l119)
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #46: GFLOPs: 23.7860. Time: 3724.8130 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #47: GFLOPs: 7.5096. Time: 11797.9832 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #48: GFLOPs: 17.1751. Time: 5158.5264 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #49: GFLOPs: 9.2927. Time: 9534.2198 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #50: GFLOPs: 55.9002. Time: 1584.9374 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #51: GFLOPs: 22.9782. Time: 3855.7479 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #52: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(28), T.int64(16)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_fused_fused * T.int64(14) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_fused_fused * T.int64(14) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(7) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(14), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_fused_fused * T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 14, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 7])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b68)
l78 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l76, l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b116)
b142 = sch.decompose_reduction(block=b116, loop=l126)
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #53: GFLOPs: 7.3436. Time: 12064.6569 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(56), oc_chunk_2_init * T.int64(28) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(56), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(56), oc_chunk_2 * T.int64(28) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(15) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(686)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 28])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[56, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b105)
b123 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #55: GFLOPs: 11.7630. Time: 7531.9735 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #56: GFLOPs: 0.5285. Time: 167627.2853 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #57: GFLOPs: 1.4000. Time: 63282.5540 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #58: GFLOPs: 53.9227. Time: 1643.0616 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #59: GFLOPs: 23.8217. Time: 3719.2243 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #60: GFLOPs: 19.0523. Time: 4650.2562 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #61: GFLOPs: 11.1850. Time: 7921.1682 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #62: GFLOPs: 7.7729. Time: 11398.3811 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #63: GFLOPs: 7.6433. Time: 11591.6453 us. Best GFLOPs: 120.6515
2024-04-29 15:05:18 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #64: GFLOPs: 71.5501. Time: 1238.2696 us. Best GFLOPs: 120.6515
2024-04-29 15:19:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:19:27 [INFO] [evolutionary_search.cc:715] Picked top 57 candidate(s) from database
2024-04-29 15:19:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 12 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 15:19:32 [INFO] [evolutionary_search.cc:723] Sampled 443 candidate(s)
2024-04-29 15:19:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 15:19:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 4 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 15:20:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 15:20:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 15:20:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9206  0.8578  0.8533  0.8513  0.8475  0.8422  0.8385  0.8355  0.8312  0.8312  0.8312  0.8139  0.8139  0.8025  0.7983  0.7864
[17 : 32]:	0.7831  0.7791  0.7689  0.7686  0.7644  0.7631  0.7631  0.7618  0.7556  0.7553  0.7538  0.7509  0.7470  0.7435  0.7428  0.7410
[33 : 48]:	0.7382  0.7343  0.7317  0.7311  0.7287  0.7280  0.7274  0.7273  0.7273  0.7273  0.7263  0.7263  0.7262  0.7262  0.7262  0.7236
[49 : 64]:	0.7224  0.7223  0.7187  0.7173  0.7141  0.7129  0.7121  0.7073  0.7071  0.7070  0.7034  0.7028  0.7020  0.7008  0.6977  0.6975
2024-04-29 15:20:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:20:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #65: GFLOPs: 78.3857. Time: 1130.2858 us. Best GFLOPs: 120.6515
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #66: GFLOPs: 60.9360. Time: 1453.9555 us. Best GFLOPs: 120.6515
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #67: GFLOPs: 121.9324. Time: 726.6178 us. Best GFLOPs: 121.9324
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #68: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(28), T.int64(3)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), oh_1 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(7) * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(7) * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(14) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(14), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(7) * T.int64(14) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 14, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 14])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l109)
l110 = sch.fuse(l108, preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b70)
l117 = sch.fuse(l115, l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #69: GFLOPs: 129.0451. Time: 686.5684 us. Best GFLOPs: 129.0451
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #70: GFLOPs: 80.5283. Time: 1100.2132 us. Best GFLOPs: 129.0451
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #71: GFLOPs: 121.6199. Time: 728.4849 us. Best GFLOPs: 129.0451
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #72: GFLOPs: 74.1921. Time: 1194.1734 us. Best GFLOPs: 129.0451
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #73: GFLOPs: 88.9803. Time: 995.7071 us. Best GFLOPs: 129.0451
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #74: GFLOPs: 121.0455. Time: 731.9418 us. Best GFLOPs: 129.0451
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #75: GFLOPs: 129.7456. Time: 682.8614 us. Best GFLOPs: 129.7456
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #76: GFLOPs: 86.0693. Time: 1029.3831 us. Best GFLOPs: 129.7456
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #77: GFLOPs: 70.7887. Time: 1251.5887 us. Best GFLOPs: 129.7456
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #78: GFLOPs: 164.1181. Time: 539.8447 us. Best GFLOPs: 164.1181
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #79: GFLOPs: 129.4253. Time: 684.5512 us. Best GFLOPs: 164.1181
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #80: GFLOPs: 185.7657. Time: 476.9356 us. Best GFLOPs: 185.7657
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #81: GFLOPs: 204.8700. Time: 432.4609 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #82: GFLOPs: 121.5944. Time: 728.6378 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #83: GFLOPs: 106.2827. Time: 833.6099 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #84: GFLOPs: 121.7744. Time: 727.5609 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #85: GFLOPs: 114.3794. Time: 774.5999 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #86: GFLOPs: 82.2221. Time: 1077.5479 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #87: GFLOPs: 74.0611. Time: 1196.2855 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #88: GFLOPs: 109.2219. Time: 811.1766 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #89: GFLOPs: 149.4669. Time: 592.7617 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #90: GFLOPs: 139.8129. Time: 633.6917 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #91: GFLOPs: 89.8342. Time: 986.2423 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #92: GFLOPs: 118.8998. Time: 745.1507 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #93: GFLOPs: 121.9036. Time: 726.7895 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #94: GFLOPs: 130.5954. Time: 678.4178 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #95: GFLOPs: 120.4374. Time: 735.6374 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #96: GFLOPs: 95.3380. Time: 929.3071 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #97: GFLOPs: 159.3045. Time: 556.1567 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #98: GFLOPs: 55.9736. Time: 1582.8590 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #99: GFLOPs: 111.5354. Time: 794.3510 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #100: GFLOPs: 131.5112. Time: 673.6936 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #101: GFLOPs: 61.2417. Time: 1446.6993 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #102: GFLOPs: 115.2976. Time: 768.4314 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #103: GFLOPs: 65.1028. Time: 1360.8986 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #104: GFLOPs: 75.2471. Time: 1177.4305 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #105: GFLOPs: 96.9922. Time: 913.4574 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #106: GFLOPs: 112.3521. Time: 788.5772 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #107: GFLOPs: 107.3702. Time: 825.1661 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #108: GFLOPs: 107.7456. Time: 822.2915 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #109: GFLOPs: 164.6928. Time: 537.9609 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #110: GFLOPs: 95.2645. Time: 930.0235 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #111: GFLOPs: 166.6647. Time: 531.5958 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #112: GFLOPs: 112.0675. Time: 790.5799 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #113: GFLOPs: 18.3124. Time: 4838.1478 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #114: GFLOPs: 88.3528. Time: 1002.7781 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #115: GFLOPs: 136.7615. Time: 647.8306 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #116: GFLOPs: 70.3753. Time: 1258.9393 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #117: GFLOPs: 76.3064. Time: 1161.0857 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #118: GFLOPs: 133.9840. Time: 661.2603 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #119: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(28), T.int64(3)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) + oh_1 + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(14) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(14)):
                for ax2_ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(14) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14))
                        v_ax3 = T.axis.spatial(T.int64(14), ax2_ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 14, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 14])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l83, l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l109)
l110 = sch.fuse(l108, preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b70)
l117 = sch.fuse(l114, l115, l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #120: GFLOPs: 156.0419. Time: 567.7850 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #121: GFLOPs: 159.7764. Time: 554.5141 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #122: GFLOPs: 73.3154. Time: 1208.4539 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #123: GFLOPs: 94.0234. Time: 942.2998 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #124: GFLOPs: 172.8708. Time: 512.5115 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #125: GFLOPs: 127.2365. Time: 696.3276 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #126: GFLOPs: 39.6162. Time: 2236.4136 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #127: GFLOPs: 20.1820. Time: 4389.9667 us. Best GFLOPs: 204.8700
2024-04-29 15:21:51 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #128: GFLOPs: 3.7355. Time: 23717.9320 us. Best GFLOPs: 204.8700
2024-04-29 16:11:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:11:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:12:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 5 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 16:12:00 [INFO] [evolutionary_search.cc:723] Sampled 405 candidate(s)
2024-04-29 16:12:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 16:12:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 16:12:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 16:12:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 16:12:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9117  0.8883  0.8771  0.8771  0.8666  0.8666  0.8666  0.8588  0.8432  0.8362  0.8342  0.8304  0.8048  0.7742  0.7690  0.7690
[17 : 32]:	0.7663  0.7630  0.7630  0.7616  0.7616  0.7616  0.7600  0.7577  0.7496  0.7390  0.7385  0.7377  0.7342  0.7342  0.7338  0.7288
[33 : 48]:	0.7243  0.7234  0.7212  0.7150  0.7063  0.7060  0.7006  0.6984  0.6974  0.6952  0.6922  0.6908  0.6908  0.6908  0.6873  0.6863
[49 : 64]:	0.6825  0.6808  0.6789  0.6788  0.6775  0.6767  0.6767  0.6767  0.6767  0.6742  0.6742  0.6725  0.6725  0.6719  0.6712  0.6710
2024-04-29 16:12:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:12:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #129: GFLOPs: 96.9644. Time: 913.7200 us. Best GFLOPs: 204.8700
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #130: GFLOPs: 91.8668. Time: 964.4206 us. Best GFLOPs: 204.8700
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #131: GFLOPs: 182.0289. Time: 486.7264 us. Best GFLOPs: 204.8700
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #132: GFLOPs: 161.2693. Time: 549.3809 us. Best GFLOPs: 204.8700
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #133: GFLOPs: 186.2182. Time: 475.7767 us. Best GFLOPs: 204.8700
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #134: GFLOPs: 167.1568. Time: 530.0309 us. Best GFLOPs: 204.8700
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #135: GFLOPs: 211.3245. Time: 419.2523 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #136: GFLOPs: 166.4147. Time: 532.3946 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #137: GFLOPs: 165.9175. Time: 533.9899 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #138: GFLOPs: 171.9454. Time: 515.2697 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #139: GFLOPs: 169.5615. Time: 522.5142 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #140: GFLOPs: 148.5400. Time: 596.4607 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #141: GFLOPs: 189.2010. Time: 468.2758 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #142: GFLOPs: 192.3614. Time: 460.5823 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #143: GFLOPs: 179.3973. Time: 493.8664 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #144: GFLOPs: 179.1073. Time: 494.6659 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #145: GFLOPs: 206.2084. Time: 429.6541 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #146: GFLOPs: 201.0327. Time: 440.7158 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #147: GFLOPs: 203.6058. Time: 435.1461 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #148: GFLOPs: 191.3295. Time: 463.0664 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #149: GFLOPs: 170.1469. Time: 520.7163 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #150: GFLOPs: 131.2436. Time: 675.0672 us. Best GFLOPs: 211.3245
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #151: GFLOPs: 331.5462. Time: 267.2275 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #152: GFLOPs: 154.2344. Time: 574.4393 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #153: GFLOPs: 149.2767. Time: 593.5169 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #154: GFLOPs: 118.1422. Time: 749.9288 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #155: GFLOPs: 148.2344. Time: 597.6903 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #156: GFLOPs: 126.9119. Time: 698.1084 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #157: GFLOPs: 153.0484. Time: 578.8906 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #158: GFLOPs: 152.9936. Time: 579.0979 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #159: GFLOPs: 166.1128. Time: 533.3620 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #160: GFLOPs: 182.2776. Time: 486.0624 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #161: GFLOPs: 180.4022. Time: 491.1154 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #162: GFLOPs: 102.6713. Time: 862.9312 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #163: GFLOPs: 125.0252. Time: 708.6431 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #164: GFLOPs: 146.4105. Time: 605.1359 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #165: GFLOPs: 137.4158. Time: 644.7461 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #166: GFLOPs: 109.9441. Time: 805.8486 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #167: GFLOPs: 130.4220. Time: 679.3198 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #168: GFLOPs: 176.0596. Time: 503.2288 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #169: GFLOPs: 180.2987. Time: 491.3973 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #170: GFLOPs: 156.8876. Time: 564.7245 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #171: GFLOPs: 96.6585. Time: 916.6112 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #172: GFLOPs: 100.8806. Time: 878.2491 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #173: GFLOPs: 114.5275. Time: 773.5985 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #174: GFLOPs: 130.0945. Time: 681.0303 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #175: GFLOPs: 213.1177. Time: 415.7246 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #176: GFLOPs: 120.3028. Time: 736.4603 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #177: GFLOPs: 110.6667. Time: 800.5865 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #178: GFLOPs: 138.6218. Time: 639.1368 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #179: GFLOPs: 203.4151. Time: 435.5540 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #180: GFLOPs: 157.4134. Time: 562.8381 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #181: GFLOPs: 157.3922. Time: 562.9139 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #182: GFLOPs: 135.0067. Time: 656.2509 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #183: GFLOPs: 159.4528. Time: 555.6395 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #184: GFLOPs: 138.9058. Time: 637.8298 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #185: GFLOPs: 159.2723. Time: 556.2691 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #186: GFLOPs: 153.9906. Time: 575.3485 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #187: GFLOPs: 233.2972. Time: 379.7657 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #188: GFLOPs: 191.8264. Time: 461.8670 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #189: GFLOPs: 151.2188. Time: 585.8946 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #190: GFLOPs: 13.1324. Time: 6746.5649 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #191: GFLOPs: 45.6247. Time: 1941.8945 us. Best GFLOPs: 331.5462
2024-04-29 16:14:14 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #192: GFLOPs: 17.1617. Time: 5162.5584 us. Best GFLOPs: 331.5462
2024-04-29 17:46:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:46:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:46:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 10 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:46:47 [INFO] [evolutionary_search.cc:723] Sampled 400 candidate(s)
2024-04-29 17:46:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:47:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:47:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:47:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:47:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9559  0.9559  0.9559  0.9559  0.9559  0.9319  0.9319  0.9319  0.9319  0.9003  0.9003  0.8162  0.8162  0.8114  0.8047  0.8047
[17 : 32]:	0.7873  0.7825  0.7825  0.7825  0.7739  0.7672  0.7672  0.7269  0.7269  0.7263  0.7181  0.7181  0.7016  0.6776  0.6677  0.6604
[33 : 48]:	0.6593  0.6453  0.6433  0.6433  0.6408  0.6348  0.6316  0.6242  0.6238  0.6148  0.6093  0.6028  0.6028  0.6017  0.6011  0.5972
[49 : 64]:	0.5954  0.5948  0.5909  0.5879  0.5879  0.5849  0.5832  0.5830  0.5828  0.5823  0.5818  0.5818  0.5796  0.5784  0.5784  0.5784
2024-04-29 17:47:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:47:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #193: GFLOPs: 74.1439. Time: 1194.9504 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #194: GFLOPs: 134.1651. Time: 660.3677 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #195: GFLOPs: 89.5469. Time: 989.4066 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #196: GFLOPs: 51.1952. Time: 1730.5971 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #197: GFLOPs: 75.1561. Time: 1178.8560 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #198: GFLOPs: 71.4207. Time: 1240.5127 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #199: GFLOPs: 115.8739. Time: 764.6091 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #200: GFLOPs: 135.8165. Time: 652.3380 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #201: GFLOPs: 112.6597. Time: 786.4241 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #202: GFLOPs: 246.0215. Time: 360.1240 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #203: GFLOPs: 155.1905. Time: 570.9003 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #204: GFLOPs: 147.5040. Time: 600.6500 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #205: GFLOPs: 36.6933. Time: 2414.5657 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #206: GFLOPs: 109.8550. Time: 806.5017 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #207: GFLOPs: 256.7541. Time: 345.0705 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #208: GFLOPs: 298.4935. Time: 296.8181 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #209: GFLOPs: 148.6974. Time: 595.8291 us. Best GFLOPs: 331.5462
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #210: GFLOPs: 342.8290. Time: 258.4328 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #211: GFLOPs: 158.6742. Time: 558.3659 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #212: GFLOPs: 119.0645. Time: 744.1200 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #213: GFLOPs: 110.4460. Time: 802.1866 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #214: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(28), T.int64(3)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(14) * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(14) * T.int64(14) + oc_chunk_1 * T.int64(14) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14) + oh_1 + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(7) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1 in T.grid(T.int64(1), T.int64(14)):
                    for ax2_ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(14) * T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14))
                            v_ax3 = T.axis.spatial(T.int64(14), ax2_ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 14, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 7])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l112, l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b116)
b141 = sch.decompose_reduction(block=b116, loop=l125)
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #215: GFLOPs: 160.5110. Time: 551.9762 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #216: GFLOPs: 149.6174. Time: 592.1655 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #217: GFLOPs: 101.3116. Time: 874.5124 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #218: GFLOPs: 83.1956. Time: 1064.9394 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #219: GFLOPs: 162.0598. Time: 546.7012 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #220: GFLOPs: 161.5640. Time: 548.3787 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #221: GFLOPs: 323.3679. Time: 273.9860 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #222: GFLOPs: 108.4959. Time: 816.6050 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #223: GFLOPs: 150.8513. Time: 587.3218 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #224: GFLOPs: 101.2302. Time: 875.2158 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #225: GFLOPs: 98.3593. Time: 900.7612 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #226: GFLOPs: 120.6934. Time: 734.0774 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #227: GFLOPs: 242.7971. Time: 364.9066 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #228: GFLOPs: 263.4223. Time: 336.3355 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #229: GFLOPs: 61.8269. Time: 1433.0043 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #230: GFLOPs: 73.7164. Time: 1201.8799 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #231: GFLOPs: 194.3445. Time: 455.8825 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #232: GFLOPs: 314.9408. Time: 281.3172 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #233: GFLOPs: 309.2330. Time: 286.5097 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #234: GFLOPs: 68.3288. Time: 1296.6459 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #235: GFLOPs: 140.9698. Time: 628.4911 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #236: GFLOPs: 201.9435. Time: 438.7281 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #237: GFLOPs: 207.7188. Time: 426.5298 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #238: GFLOPs: 203.5991. Time: 435.1604 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #239: GFLOPs: 135.9181. Time: 651.8503 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #240: GFLOPs: 325.6914. Time: 272.0314 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #241: GFLOPs: 176.1698. Time: 502.9141 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #242: GFLOPs: 187.8964. Time: 471.5273 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #243: GFLOPs: 127.5979. Time: 694.3555 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #244: GFLOPs: 177.3240. Time: 499.6407 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #245: GFLOPs: 175.1704. Time: 505.7834 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #246: GFLOPs: 30.3037. Time: 2923.6743 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #247: GFLOPs: 89.2328. Time: 992.8887 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #248: GFLOPs: 109.6037. Time: 808.3513 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #249: GFLOPs: 238.9038. Time: 370.8533 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #250: GFLOPs: 141.9274. Time: 624.2505 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #251: GFLOPs: 207.8369. Time: 426.2874 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #252: GFLOPs: 214.2551. Time: 413.5177 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #253: GFLOPs: 245.8382. Time: 360.3926 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #254: GFLOPs: 6.2060. Time: 14276.2035 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #255: GFLOPs: 43.8796. Time: 2019.1224 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #256: GFLOPs: 21.9946. Time: 4028.1896 us. Best GFLOPs: 342.8290
2024-04-29 17:49:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:49:14 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:49:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 5 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:49:18 [INFO] [evolutionary_search.cc:723] Sampled 405 candidate(s)
2024-04-29 17:49:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:49:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:49:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 4 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:50:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69e6708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3cda1f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6659638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x336e018)]: 0 failure(s)
2024-04-29 17:50:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9390  0.9115  0.8977  0.8720  0.8632  0.8528  0.8528  0.8528  0.8486  0.8227  0.8227  0.8227  0.8227  0.8227  0.8227  0.8227
[17 : 32]:	0.8227  0.8227  0.8227  0.8141  0.8141  0.8141  0.8141  0.8141  0.8141  0.8082  0.8043  0.8031  0.8016  0.8004  0.7872  0.7852
[33 : 48]:	0.7682  0.7655  0.7569  0.7535  0.7518  0.7467  0.7465  0.7445  0.7434  0.7434  0.7434  0.7434  0.7379  0.7361  0.7333  0.7304
[49 : 64]:	0.7290  0.7250  0.7250  0.7250  0.7247  0.7247  0.7230  0.7230  0.7188  0.7188  0.7161  0.7130  0.7124  0.7082  0.7082  0.7082
2024-04-29 17:50:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:50:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #257: GFLOPs: 325.9694. Time: 271.7994 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #258: GFLOPs: 324.0870. Time: 273.3781 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #259: GFLOPs: 314.3108. Time: 281.8811 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #260: GFLOPs: 276.3419. Time: 320.6111 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #261: GFLOPs: 311.8270. Time: 284.1264 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #262: GFLOPs: 311.8171. Time: 284.1354 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #263: GFLOPs: 308.8998. Time: 286.8188 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #264: GFLOPs: 276.0228. Time: 320.9817 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #265: GFLOPs: 115.3656. Time: 767.9781 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #266: GFLOPs: 322.4676. Time: 274.7509 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #267: GFLOPs: 100.0670. Time: 885.3897 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #268: GFLOPs: 130.6651. Time: 678.0562 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #269: GFLOPs: 138.4413. Time: 639.9701 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #270: GFLOPs: 104.2147. Time: 850.1514 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #271: GFLOPs: 262.8877. Time: 337.0195 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #272: GFLOPs: 264.7371. Time: 334.6652 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #273: GFLOPs: 116.6710. Time: 759.3855 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #274: GFLOPs: 118.6793. Time: 746.5352 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #275: GFLOPs: 98.3232. Time: 901.0923 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #276: GFLOPs: 196.9436. Time: 449.8663 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #277: GFLOPs: 238.0362. Time: 372.2050 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #278: GFLOPs: 231.9138. Time: 382.0311 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #279: GFLOPs: 207.7490. Time: 426.4678 us. Best GFLOPs: 342.8290
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #280: GFLOPs: 352.0819. Time: 251.6411 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #281: GFLOPs: 337.7457. Time: 262.3225 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #282: GFLOPs: 328.8741. Time: 269.3988 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #283: GFLOPs: 307.8938. Time: 287.7560 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #284: GFLOPs: 179.2830. Time: 494.1812 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #285: GFLOPs: 274.0773. Time: 323.2601 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #286: GFLOPs: 294.8033. Time: 300.5335 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #287: GFLOPs: 293.1548. Time: 302.2235 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #288: GFLOPs: 91.1907. Time: 971.5711 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #289: GFLOPs: 130.0284. Time: 681.3761 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #290: GFLOPs: 337.6609. Time: 262.3883 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #291: GFLOPs: 336.4595. Time: 263.3252 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #292: GFLOPs: 342.8744. Time: 258.3986 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #293: GFLOPs: 204.5595. Time: 433.1173 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #294: GFLOPs: 179.5661. Time: 493.4020 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #295: GFLOPs: 327.1187. Time: 270.8444 us. Best GFLOPs: 352.0819
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #296: GFLOPs: 364.7833. Time: 242.8792 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #297: GFLOPs: 238.7369. Time: 371.1126 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #298: GFLOPs: 184.2610. Time: 480.8303 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #299: GFLOPs: 179.1138. Time: 494.6480 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #300: GFLOPs: 349.0067. Time: 253.8584 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #301: GFLOPs: 99.5616. Time: 889.8837 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #302: GFLOPs: 93.6759. Time: 945.7955 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #303: GFLOPs: 158.1480. Time: 560.2240 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #304: GFLOPs: 195.9011. Time: 452.2603 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #305: GFLOPs: 299.1045. Time: 296.2118 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #306: GFLOPs: 208.1428. Time: 425.6611 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #307: GFLOPs: 116.6464. Time: 759.5459 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #308: GFLOPs: 158.6043. Time: 558.6119 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #309: GFLOPs: 237.5108. Time: 373.0284 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #310: GFLOPs: 237.4064. Time: 373.1924 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #311: GFLOPs: 319.2799. Time: 277.4941 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #312: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(28), T.int64(3)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(14) * T.int64(28) + oc_chunk_1 * T.int64(28) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(14) * T.int64(28) + oc_chunk_1 * T.int64(28) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14) + oh_1 + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(4) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1 in T.grid(T.int64(1), T.int64(28)):
                    for ax2_ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(14) * T.int64(28) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14))
                            v_ax3 = T.axis.spatial(T.int64(14), ax2_ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[28, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l112, l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b116)
b141 = sch.decompose_reduction(block=b116, loop=l125)
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #313: GFLOPs: 200.7845. Time: 441.2605 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #314: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(28), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(56), T.int64(28), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(28), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(56), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(28), T.int64(3)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(14) * T.int64(28) + oc_chunk_1 * T.int64(28) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(14) * T.int64(28) + oc_chunk_1 * T.int64(28) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14) + oh_1 + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(112), ic_0 * T.int64(7) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1 in T.grid(T.int64(1), T.int64(28)):
                    for ax2_ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(14) * T.int64(28) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(14))
                            v_ax3 = T.axis.spatial(T.int64(14), ax2_ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 7])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l112, l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b116)
b141 = sch.decompose_reduction(block=b116, loop=l125)
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #315: GFLOPs: 345.7952. Time: 256.2160 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #316: GFLOPs: 91.0369. Time: 973.2130 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #317: GFLOPs: 335.0900. Time: 264.4014 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #318: GFLOPs: 57.0284. Time: 1553.5824 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #319: GFLOPs: 25.9989. Time: 3407.7750 us. Best GFLOPs: 364.7833
2024-04-29 17:51:58 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_22] Trial #320: GFLOPs: 18.1673. Time: 4876.7880 us. Best GFLOPs: 364.7833
