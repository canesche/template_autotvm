2024-04-29 13:19:34 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12"
2024-04-29 13:19:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4), T.int64(528), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:19:34 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:19:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(10), T.int64(7), T.int64(2), T.int64(1), T.int64(528), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(20) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(528), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 10, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[528, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:19:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(10), T.int64(7), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(528), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(20) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(20) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 10, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[528, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:19:34 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(10), T.int64(7), T.int64(2), T.int64(1), T.int64(528), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(20) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(20), T.int64(7), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(40), oc_chunk_0 * T.int64(20) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 10, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[528, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:45:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:45:17 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:45:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 13:45:19 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:45:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 13:45:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 13:45:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 13:45:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 13:45:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9989  0.9989  0.9989  0.9987  0.9984  0.9977  0.9975  0.9970  0.9963  0.9962  0.9961  0.9952  0.9945  0.9930  0.9923
[17 : 32]:	0.9922  0.9921  0.9921  0.9913  0.9901  0.9900  0.9899  0.9886  0.9884  0.9879  0.9877  0.9874  0.9867  0.9865  0.9857  0.9839
[33 : 48]:	0.9829  0.9827  0.9824  0.9818  0.9812  0.9808  0.9806  0.9801  0.9788  0.9767  0.9745  0.9745  0.9743  0.9742  0.9740  0.9738
[49 : 64]:	0.9730  0.9730  0.9728  0.9725  0.9725  0.9720  0.9713  0.9713  0.9705  0.9703  0.9700  0.9699  0.9689  0.9689  0.9682  0.9676
2024-04-29 13:45:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 13:45:33 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #1: GFLOPs: 42.1583. Time: 787.0063 us. Best GFLOPs: 42.1583
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #2: GFLOPs: 6.0261. Time: 5505.8817 us. Best GFLOPs: 42.1583
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #3: GFLOPs: 15.3372. Time: 2163.2936 us. Best GFLOPs: 42.1583
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #4: GFLOPs: 2.9180. Time: 11370.3944 us. Best GFLOPs: 42.1583
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #5: GFLOPs: 10.3714. Time: 3199.0756 us. Best GFLOPs: 42.1583
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #6: GFLOPs: 25.0149. Time: 1326.3629 us. Best GFLOPs: 42.1583
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #7: GFLOPs: 86.9632. Time: 381.5278 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #8: GFLOPs: 36.8599. Time: 900.1361 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #9: GFLOPs: 47.4471. Time: 699.2812 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #10: GFLOPs: 53.5522. Time: 619.5616 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #11: GFLOPs: 46.6521. Time: 711.1983 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #12: GFLOPs: 4.4598. Time: 7439.5996 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #13: GFLOPs: 27.0163. Time: 1228.1067 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #14: GFLOPs: 38.1081. Time: 870.6508 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #15: GFLOPs: 14.8313. Time: 2237.0833 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #16: GFLOPs: 17.9161. Time: 1851.9033 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #17: GFLOPs: 4.2940. Time: 7726.8305 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #18: GFLOPs: 7.6339. Time: 4346.2465 us. Best GFLOPs: 86.9632
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #19: GFLOPs: 102.0286. Time: 325.1919 us. Best GFLOPs: 102.0286
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #20: GFLOPs: 145.3876. Time: 228.2098 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(10) + oc_chunk_1 * T.int64(10) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(14), T.int64(2), T.int64(44), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(10) + oc_chunk_1 * T.int64(10) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(44) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(10), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(10) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 5, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 44])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #22: GFLOPs: 62.4433. Time: 531.3439 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(40), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(10) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(33), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(10) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(10), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(40), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(10) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 10, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[33, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #24: GFLOPs: 49.7605. Time: 666.7720 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #25: GFLOPs: 6.6477. Time: 4991.0421 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #26: GFLOPs: 87.4633. Time: 379.3463 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #27: GFLOPs: 58.1289. Time: 570.7811 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #28: GFLOPs: 37.9264. Time: 874.8239 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #29: GFLOPs: 5.0129. Time: 6618.7592 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #30: GFLOPs: 121.6588. Time: 272.7208 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #31: GFLOPs: 51.1853. Time: 648.2116 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #32: GFLOPs: 88.2910. Time: 375.7902 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #33: GFLOPs: 79.3558. Time: 418.1025 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #34: GFLOPs: 76.3269. Time: 434.6944 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #35: GFLOPs: 15.6232. Time: 2123.6987 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #36: GFLOPs: 86.9792. Time: 381.4577 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #37: GFLOPs: 37.4059. Time: 886.9959 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #38: GFLOPs: 91.9081. Time: 361.0008 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #39: GFLOPs: 7.0131. Time: 4730.9823 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #40: GFLOPs: 84.1605. Time: 394.2335 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #41: GFLOPs: 46.9491. Time: 706.6991 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #42: GFLOPs: 43.1611. Time: 768.7212 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #43: GFLOPs: 62.4048. Time: 531.6722 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #44: GFLOPs: 45.9313. Time: 722.3589 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #45: GFLOPs: 132.1938. Time: 250.9867 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #46: GFLOPs: 75.6511. Time: 438.5777 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #47: GFLOPs: 47.6815. Time: 695.8439 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #48: GFLOPs: 46.0295. Time: 720.8177 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #49: GFLOPs: 3.4808. Time: 9531.9074 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #50: GFLOPs: 94.6034. Time: 350.7154 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #51: GFLOPs: 7.5954. Time: 4368.2736 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #52: GFLOPs: 67.3944. Time: 492.3093 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #53: GFLOPs: 7.8376. Time: 4233.3019 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #54: GFLOPs: 17.0539. Time: 1945.5295 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #55: GFLOPs: 12.1105. Time: 2739.6742 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #56: GFLOPs: 43.9157. Time: 755.5125 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #57: GFLOPs: 103.9819. Time: 319.0833 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #58: GFLOPs: 32.5588. Time: 1019.0451 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #59: GFLOPs: 47.0814. Time: 704.7135 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #60: GFLOPs: 33.0407. Time: 1004.1815 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #61: GFLOPs: 16.5669. Time: 2002.7208 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #62: GFLOPs: 48.4817. Time: 684.3585 us. Best GFLOPs: 145.3876
2024-04-29 15:04:32 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #63: GFLOPs: 77.5982. Time: 427.5727 us. Best GFLOPs: 145.3876
2024-04-29 16:05:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:05:38 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 16:05:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 16:05:41 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 16:05:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 16:05:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 16:05:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 16:06:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3651618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3442858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x633f7c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5fc5138)]: 0 failure(s)
2024-04-29 16:06:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9006  0.8844  0.8721  0.8311  0.8084  0.8081  0.8079  0.8049  0.8033  0.7900  0.7808  0.7801  0.7761  0.7749  0.7735  0.7727
[17 : 32]:	0.7696  0.7654  0.7654  0.7646  0.7639  0.7617  0.7579  0.7552  0.7552  0.7543  0.7523  0.7478  0.7471  0.7469  0.7420  0.7399
[33 : 48]:	0.7319  0.7298  0.7248  0.7232  0.7232  0.7181  0.7137  0.7137  0.7130  0.7104  0.7077  0.7031  0.7011  0.7007  0.6989  0.6941
[49 : 64]:	0.6929  0.6918  0.6918  0.6916  0.6915  0.6893  0.6881  0.6880  0.6854  0.6846  0.6842  0.6829  0.6803  0.6802  0.6786  0.6774
2024-04-29 16:06:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:06:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #64: GFLOPs: 66.5359. Time: 498.6614 us. Best GFLOPs: 145.3876
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #65: GFLOPs: 68.4774. Time: 484.5232 us. Best GFLOPs: 145.3876
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #66: GFLOPs: 138.6958. Time: 239.2205 us. Best GFLOPs: 145.3876
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #67: GFLOPs: 84.0300. Time: 394.8455 us. Best GFLOPs: 145.3876
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #68: GFLOPs: 174.0714. Time: 190.6050 us. Best GFLOPs: 174.0714
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #69: GFLOPs: 130.8737. Time: 253.5184 us. Best GFLOPs: 174.0714
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #70: GFLOPs: 266.9742. Time: 124.2775 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #71: GFLOPs: 130.6413. Time: 253.9694 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #72: GFLOPs: 157.9280. Time: 210.0887 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #73: GFLOPs: 159.5577. Time: 207.9428 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #74: GFLOPs: 123.9789. Time: 267.6171 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #75: GFLOPs: 116.4993. Time: 284.7990 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #76: GFLOPs: 111.2853. Time: 298.1426 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #77: GFLOPs: 132.8950. Time: 249.6623 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #78: GFLOPs: 132.5800. Time: 250.2555 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #79: GFLOPs: 202.5896. Time: 163.7739 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #80: GFLOPs: 198.5048. Time: 167.1440 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #81: GFLOPs: 128.4882. Time: 258.2251 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #82: GFLOPs: 141.2350. Time: 234.9196 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #83: GFLOPs: 102.7301. Time: 322.9715 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #84: GFLOPs: 137.0716. Time: 242.0552 us. Best GFLOPs: 266.9742
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #85: GFLOPs: 317.0432. Time: 104.6510 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #86: GFLOPs: 173.2894. Time: 191.4651 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #87: GFLOPs: 98.1179. Time: 338.1530 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #88: GFLOPs: 98.1996. Time: 337.8719 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #89: GFLOPs: 297.5748. Time: 111.4976 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #90: GFLOPs: 116.0819. Time: 285.8230 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #91: GFLOPs: 155.0032. Time: 214.0528 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #92: GFLOPs: 145.6362. Time: 227.8202 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #93: GFLOPs: 153.3964. Time: 216.2951 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #94: GFLOPs: 120.6842. Time: 274.9232 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #95: GFLOPs: 99.4169. Time: 333.7347 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #96: GFLOPs: 166.5266. Time: 199.2407 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #97: GFLOPs: 233.0734. Time: 142.3538 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #98: GFLOPs: 163.3709. Time: 203.0893 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #99: GFLOPs: 142.9551. Time: 232.0930 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #100: GFLOPs: 137.3616. Time: 241.5440 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #101: GFLOPs: 121.3759. Time: 273.3564 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #102: GFLOPs: 162.1006. Time: 204.6808 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #103: GFLOPs: 146.9390. Time: 225.8004 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #104: GFLOPs: 137.9043. Time: 240.5935 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #105: GFLOPs: 83.6377. Time: 396.6975 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #106: GFLOPs: 66.9440. Time: 495.6217 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #107: GFLOPs: 221.3275. Time: 149.9086 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #108: GFLOPs: 78.6051. Time: 422.0957 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #109: GFLOPs: 169.8413. Time: 195.3522 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #110: GFLOPs: 181.9155. Time: 182.3862 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #111: GFLOPs: 115.7227. Time: 286.7102 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #112: GFLOPs: 113.7617. Time: 291.6525 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #113: GFLOPs: 92.1565. Time: 360.0276 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #114: GFLOPs: 59.2703. Time: 559.7896 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #115: GFLOPs: 123.6382. Time: 268.3547 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #116: GFLOPs: 78.3857. Time: 423.2773 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #117: GFLOPs: 71.9191. Time: 461.3362 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #118: GFLOPs: 109.5106. Time: 302.9740 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #119: GFLOPs: 148.3079. Time: 223.7162 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #120: GFLOPs: 110.9351. Time: 299.0836 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #121: GFLOPs: 152.7510. Time: 217.2089 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #122: GFLOPs: 109.7152. Time: 302.4090 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #123: GFLOPs: 191.3964. Time: 173.3516 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #124: GFLOPs: 178.8723. Time: 185.4892 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #125: GFLOPs: 25.1622. Time: 1318.5984 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #126: GFLOPs: 8.3552. Time: 3971.0674 us. Best GFLOPs: 317.0432
2024-04-29 16:07:23 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #127: GFLOPs: 118.8891. Time: 279.0741 us. Best GFLOPs: 317.0432
