2024-04-29 13:20:13 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20"
2024-04-29 13:20:13 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:20:13 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:20:13 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(6), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:20:13 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(6), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(6), oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:20:13 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(6), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:59:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 13:59:53 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 13:59:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 13:59:56 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 13:59:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 14:00:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 14:00:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 14:00:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 14:00:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9997  0.9996  0.9988  0.9985  0.9984  0.9983  0.9979  0.9977  0.9974  0.9973  0.9969  0.9967  0.9962  0.9958  0.9954
[17 : 32]:	0.9950  0.9949  0.9949  0.9944  0.9939  0.9939  0.9935  0.9932  0.9923  0.9920  0.9914  0.9914  0.9911  0.9903  0.9902  0.9901
[33 : 48]:	0.9900  0.9890  0.9889  0.9887  0.9884  0.9884  0.9877  0.9870  0.9869  0.9868  0.9864  0.9864  0.9860  0.9859  0.9856  0.9853
[49 : 64]:	0.9839  0.9834  0.9834  0.9822  0.9820  0.9817  0.9811  0.9802  0.9775  0.9768  0.9763  0.9756  0.9752  0.9743  0.9734  0.9729
2024-04-29 14:00:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:00:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #1: GFLOPs: 34.1388. Time: 141.3729 us. Best GFLOPs: 34.1388
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #2: GFLOPs: 12.1088. Time: 398.5787 us. Best GFLOPs: 34.1388
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #3: GFLOPs: 4.1890. Time: 1152.1300 us. Best GFLOPs: 34.1388
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #4: GFLOPs: 0.3254. Time: 14829.9716 us. Best GFLOPs: 34.1388
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #5: GFLOPs: 29.8091. Time: 161.9073 us. Best GFLOPs: 34.1388
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #6: GFLOPs: 33.1529. Time: 145.5769 us. Best GFLOPs: 34.1388
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #7: GFLOPs: 53.8237. Time: 89.6687 us. Best GFLOPs: 53.8237
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #8: GFLOPs: 39.1817. Time: 123.1774 us. Best GFLOPs: 53.8237
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #9: GFLOPs: 10.2479. Time: 470.9564 us. Best GFLOPs: 53.8237
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #10: GFLOPs: 45.7429. Time: 105.5094 us. Best GFLOPs: 53.8237
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #11: GFLOPs: 24.4473. Time: 197.4170 us. Best GFLOPs: 53.8237
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #12: GFLOPs: 47.5402. Time: 101.5205 us. Best GFLOPs: 53.8237
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #13: GFLOPs: 35.5808. Time: 135.6435 us. Best GFLOPs: 53.8237
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #14: GFLOPs: 76.5197. Time: 63.0727 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #15: GFLOPs: 23.0901. Time: 209.0209 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #16: GFLOPs: 36.5152. Time: 132.1723 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #17: GFLOPs: 4.5393. Time: 1063.2299 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #18: GFLOPs: 13.8897. Time: 347.4744 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #19: GFLOPs: 56.8986. Time: 84.8228 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #20: GFLOPs: 8.5496. Time: 564.5077 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #21: GFLOPs: 45.6099. Time: 105.8170 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #22: GFLOPs: 63.4269. Time: 76.0924 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #23: GFLOPs: 62.8415. Time: 76.8012 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(6), T.int64(128), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(3) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(6), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(3) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(74)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(4704))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #25: GFLOPs: 9.1456. Time: 527.7169 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #26: GFLOPs: 16.5663. Time: 291.3318 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #27: GFLOPs: 1.5737. Time: 3066.8275 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #28: GFLOPs: 61.1286. Time: 78.9533 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #29: GFLOPs: 72.1362. Time: 66.9055 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #30: GFLOPs: 4.5308. Time: 1065.2269 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #31: GFLOPs: 18.3057. Time: 263.6504 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #32: GFLOPs: 25.6858. Time: 187.8980 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #33: GFLOPs: 68.4682. Time: 70.4897 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #34: GFLOPs: 8.5064. Time: 567.3750 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #35: GFLOPs: 31.6518. Time: 152.4814 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #36: GFLOPs: 35.4136. Time: 136.2840 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #37: GFLOPs: 28.1688. Time: 171.3354 us. Best GFLOPs: 76.5197
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #38: GFLOPs: 88.7659. Time: 54.3712 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #39: GFLOPs: 9.4919. Time: 508.4639 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #40: GFLOPs: 8.3934. Time: 575.0142 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #41: GFLOPs: 41.5578. Time: 116.1347 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #42: GFLOPs: 24.1933. Time: 199.4895 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #43: GFLOPs: 6.4991. Time: 742.6069 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #44: GFLOPs: 40.3636. Time: 119.5708 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #45: GFLOPs: 8.8365. Time: 546.1756 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #46: GFLOPs: 3.9579. Time: 1219.4062 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #47: GFLOPs: 22.7506. Time: 212.1399 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #48: GFLOPs: 11.3253. Time: 426.1516 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #49: GFLOPs: 78.9677. Time: 61.1174 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #50: GFLOPs: 26.4070. Time: 182.7660 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #51: GFLOPs: 65.8388. Time: 73.3048 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #52: GFLOPs: 6.9155. Time: 697.8939 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #53: GFLOPs: 12.9169. Time: 373.6434 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #54: GFLOPs: 7.4360. Time: 649.0423 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #55: GFLOPs: 26.6463. Time: 181.1249 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #56: GFLOPs: 3.8752. Time: 1245.4404 us. Best GFLOPs: 88.7659
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #57: GFLOPs: 94.3097. Time: 51.1750 us. Best GFLOPs: 94.3097
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #58: GFLOPs: 4.2268. Time: 1141.8386 us. Best GFLOPs: 94.3097
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #59: GFLOPs: 7.8822. Time: 612.3079 us. Best GFLOPs: 94.3097
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #60: GFLOPs: 62.9953. Time: 76.6137 us. Best GFLOPs: 94.3097
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #61: GFLOPs: 31.5908. Time: 152.7756 us. Best GFLOPs: 94.3097
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #62: GFLOPs: 64.5594. Time: 74.7576 us. Best GFLOPs: 94.3097
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #63: GFLOPs: 44.8948. Time: 107.5026 us. Best GFLOPs: 94.3097
2024-04-29 15:05:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #64: GFLOPs: 64.2248. Time: 75.1471 us. Best GFLOPs: 94.3097
2024-04-29 17:27:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:27:12 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 17:27:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 17:27:15 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-29 17:27:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 17:27:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 17:27:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 17:27:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x59c46d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ef54d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3582358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6638ae8)]: 0 failure(s)
2024-04-29 17:27:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9269  0.9154  0.9110  0.9005  0.8995  0.8967  0.8927  0.8925  0.8924  0.8916  0.8869  0.8869  0.8780  0.8727  0.8727  0.8723
[17 : 32]:	0.8645  0.8628  0.8510  0.8449  0.8444  0.8421  0.8399  0.8353  0.8341  0.8331  0.8277  0.8270  0.8250  0.8232  0.8228  0.8198
[33 : 48]:	0.8192  0.8188  0.8104  0.8087  0.8085  0.8081  0.8079  0.8079  0.8070  0.8047  0.8039  0.8039  0.7997  0.7990  0.7987  0.7987
[49 : 64]:	0.7979  0.7964  0.7951  0.7950  0.7948  0.7941  0.7926  0.7918  0.7908  0.7890  0.7879  0.7872  0.7862  0.7842  0.7838  0.7838
2024-04-29 17:27:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:27:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #65: GFLOPs: 91.0167. Time: 53.0266 us. Best GFLOPs: 94.3097
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #66: GFLOPs: 93.0280. Time: 51.8801 us. Best GFLOPs: 94.3097
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #67: GFLOPs: 79.2382. Time: 60.9088 us. Best GFLOPs: 94.3097
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #68: GFLOPs: 93.2279. Time: 51.7689 us. Best GFLOPs: 94.3097
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #69: GFLOPs: 100.1432. Time: 48.1940 us. Best GFLOPs: 100.1432
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #70: GFLOPs: 91.9888. Time: 52.4662 us. Best GFLOPs: 100.1432
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #71: GFLOPs: 113.9223. Time: 42.3649 us. Best GFLOPs: 113.9223
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #72: GFLOPs: 54.2145. Time: 89.0224 us. Best GFLOPs: 113.9223
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #73: GFLOPs: 94.0782. Time: 51.3010 us. Best GFLOPs: 113.9223
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #74: GFLOPs: 53.1672. Time: 90.7760 us. Best GFLOPs: 113.9223
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #75: GFLOPs: 107.5248. Time: 44.8855 us. Best GFLOPs: 113.9223
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #76: GFLOPs: 104.3556. Time: 46.2486 us. Best GFLOPs: 113.9223
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #77: GFLOPs: 115.5248. Time: 41.7772 us. Best GFLOPs: 115.5248
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #78: GFLOPs: 28.3958. Time: 169.9655 us. Best GFLOPs: 115.5248
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #79: GFLOPs: 28.1271. Time: 171.5893 us. Best GFLOPs: 115.5248
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #80: GFLOPs: 133.8751. Time: 36.0508 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #81: GFLOPs: 92.8936. Time: 51.9552 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #82: GFLOPs: 44.4982. Time: 108.4606 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #83: GFLOPs: 94.2755. Time: 51.1936 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #84: GFLOPs: 86.6690. Time: 55.6867 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #85: GFLOPs: 97.3909. Time: 49.5560 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #86: GFLOPs: 90.8211. Time: 53.1408 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #87: GFLOPs: 87.7417. Time: 55.0058 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #88: GFLOPs: 39.8020. Time: 121.2577 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #89: GFLOPs: 86.1106. Time: 56.0477 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #90: GFLOPs: 86.2427. Time: 55.9619 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #91: GFLOPs: 83.6639. Time: 57.6868 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #92: GFLOPs: 84.8246. Time: 56.8975 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #93: GFLOPs: 83.7551. Time: 57.6240 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #94: GFLOPs: 90.3538. Time: 53.4156 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #95: GFLOPs: 68.8840. Time: 70.0642 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #96: GFLOPs: 91.3017. Time: 52.8610 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #97: GFLOPs: 86.8222. Time: 55.5884 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #98: GFLOPs: 100.8265. Time: 47.8674 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #99: GFLOPs: 28.2717. Time: 170.7113 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #100: GFLOPs: 74.1553. Time: 65.0837 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #101: GFLOPs: 74.8298. Time: 64.4971 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #102: GFLOPs: 79.8116. Time: 60.4712 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #103: GFLOPs: 56.5669. Time: 85.3202 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #104: GFLOPs: 59.1861. Time: 81.5445 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #105: GFLOPs: 125.1397. Time: 38.5673 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #106: GFLOPs: 105.4398. Time: 45.7731 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #107: GFLOPs: 38.9654. Time: 123.8612 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #108: GFLOPs: 39.2508. Time: 122.9606 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #109: GFLOPs: 65.3119. Time: 73.8962 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #110: GFLOPs: 75.9411. Time: 63.5533 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #111: GFLOPs: 61.1962. Time: 78.8661 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #112: GFLOPs: 54.8175. Time: 88.0431 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #113: GFLOPs: 61.4423. Time: 78.5502 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #114: GFLOPs: 50.4463. Time: 95.6721 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #115: GFLOPs: 91.4123. Time: 52.7971 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #116: GFLOPs: 103.8905. Time: 46.4557 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #117: GFLOPs: 42.5904. Time: 113.3192 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #118: GFLOPs: 94.8030. Time: 50.9088 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #119: GFLOPs: 94.1265. Time: 51.2747 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #120: GFLOPs: 56.7640. Time: 85.0241 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #121: GFLOPs: 66.9579. Time: 72.0797 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #122: GFLOPs: 49.4586. Time: 97.5828 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #123: GFLOPs: 89.9472. Time: 53.6571 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #124: GFLOPs: 73.7009. Time: 65.4850 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #125: GFLOPs: 78.3003. Time: 61.6384 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #126: GFLOPs: 22.3061. Time: 216.3669 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #127: GFLOPs: 8.0251. Time: 601.4047 us. Best GFLOPs: 133.8751
2024-04-29 17:29:03 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_20] Trial #128: GFLOPs: 28.4515. Time: 169.6327 us. Best GFLOPs: 133.8751
