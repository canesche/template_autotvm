2024-04-29 13:21:58 [INFO] [task_scheduler.cc:160] Initializing Task #49: "fused_nn_max_pool2d_7"
2024-04-29 13:21:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(57), T.int64(57), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(57), T.int64(57), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(56) and v_ax3 < T.int64(56), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 13:21:58 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:21:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(57), T.int64(57), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(57), T.int64(57), T.int64(4)):
                with T.block("pad_temp"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(56) and v_ax3 < T.int64(56), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:21:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(57), T.int64(57), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(48)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(57), T.int64(57), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax1_1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(56) and v_ax3 < T.int64(56), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(28), T.int64(28), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:21:58 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(57), T.int64(57), T.int64(4)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(48)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(57), T.int64(57), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax1_1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(v_ax2 < T.int64(56) and v_ax3 < T.int64(56), p0[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(-3.4028234663852886e+38))
                for ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(28), T.int64(28), T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 14:41:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:41:10 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:41:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65e78a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ee7268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x61c4458)]: 0 failure(s)
2024-04-29 14:41:12 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:41:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65e78a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ee7268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x61c4458)]: 0 failure(s)
2024-04-29 14:41:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65e78a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ee7268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x61c4458)]: 0 failure(s)
2024-04-29 14:41:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65e78a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ee7268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x61c4458)]: 0 failure(s)
2024-04-29 14:41:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65e78a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ee7268)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7a43a68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x61c4458)]: 0 failure(s)
2024-04-29 14:41:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9964  0.9949  0.9946  0.9935  0.9878  0.9876  0.9719  0.9658  0.9586  0.9585  0.9390  0.9365  0.9287  0.9263  0.9256  0.9244
[17 : 32]:	0.9230  0.9212  0.9005  0.9003  0.8993  0.8971  0.8959  0.8926  0.8925  0.8859  0.8856  0.8850  0.8832  0.8786  0.8716  0.8687
[33 : 48]:	0.8670  0.8645  0.8602  0.8590  0.8572  0.8491  0.8442  0.8357  0.8340  0.8316  0.8298  0.8291  0.8236  0.8161  0.8048  0.8024
[49 : 64]:	0.8012  0.8009  0.7927  0.7721  0.7590  0.7567  0.7544  0.7417  0.7338  0.7261  0.7231  0.7211  0.7196  0.7192  0.7190  0.7185
2024-04-29 14:41:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:41:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #1: GFLOPs: 14.4904. Time: 93.4931 us. Best GFLOPs: 14.4904
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #2: GFLOPs: 7.7020. Time: 175.8972 us. Best GFLOPs: 14.4904
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #3: GFLOPs: 15.3353. Time: 88.3420 us. Best GFLOPs: 15.3353
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #4: GFLOPs: 19.2301. Time: 70.4494 us. Best GFLOPs: 19.2301
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #5: GFLOPs: 19.3131. Time: 70.1467 us. Best GFLOPs: 19.3131
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #6: GFLOPs: 17.4741. Time: 77.5292 us. Best GFLOPs: 19.3131
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #7: GFLOPs: 23.8565. Time: 56.7875 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #8: GFLOPs: 16.7431. Time: 80.9139 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #9: GFLOPs: 17.8989. Time: 75.6890 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #10: GFLOPs: 12.5082. Time: 108.3088 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #11: GFLOPs: 20.6185. Time: 65.7057 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #12: GFLOPs: 12.5106. Time: 108.2880 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #13: GFLOPs: 12.9904. Time: 104.2888 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #14: GFLOPs: 17.4829. Time: 77.4900 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #15: GFLOPs: 11.4444. Time: 118.3769 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #16: GFLOPs: 18.1685. Time: 74.5660 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #17: GFLOPs: 20.7494. Time: 65.2911 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #18: GFLOPs: 12.4311. Time: 108.9808 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #19: GFLOPs: 8.6113. Time: 157.3226 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #20: GFLOPs: 23.2753. Time: 58.2055 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #21: GFLOPs: 12.9747. Time: 104.4151 us. Best GFLOPs: 23.8565
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #22: GFLOPs: 62.1929. Time: 21.7831 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #23: GFLOPs: 25.7494. Time: 52.6129 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #24: GFLOPs: 15.2801. Time: 88.6614 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #25: GFLOPs: 17.6645. Time: 76.6933 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #26: GFLOPs: 32.1924. Time: 42.0830 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #27: GFLOPs: 19.4302. Time: 69.7240 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #28: GFLOPs: 11.7863. Time: 114.9429 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #29: GFLOPs: 19.9941. Time: 67.7574 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #30: GFLOPs: 16.3956. Time: 82.6292 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #31: GFLOPs: 18.2663. Time: 74.1665 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #32: GFLOPs: 11.5336. Time: 117.4609 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #33: GFLOPs: 9.1925. Time: 147.3765 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #34: GFLOPs: 25.5720. Time: 52.9780 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #35: GFLOPs: 11.6346. Time: 116.4413 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #36: GFLOPs: 50.8678. Time: 26.6328 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #37: GFLOPs: 14.1790. Time: 95.5464 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #38: GFLOPs: 15.2430. Time: 88.8769 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #39: GFLOPs: 13.3914. Time: 101.1660 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #40: GFLOPs: 16.6399. Time: 81.4159 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #41: GFLOPs: 7.9755. Time: 169.8642 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #42: GFLOPs: 16.7182. Time: 81.0346 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #43: GFLOPs: 14.2344. Time: 95.1745 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #44: GFLOPs: 20.9790. Time: 64.5767 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #45: GFLOPs: 14.0975. Time: 96.0985 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #46: GFLOPs: 12.7581. Time: 106.1880 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #47: GFLOPs: 17.2057. Time: 78.7387 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #48: GFLOPs: 16.9837. Time: 79.7680 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #49: GFLOPs: 17.1726. Time: 78.8903 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #50: GFLOPs: 20.7303. Time: 65.3512 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #51: GFLOPs: 15.3057. Time: 88.5132 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #52: GFLOPs: 9.2976. Time: 145.7091 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #53: GFLOPs: 10.2341. Time: 132.3767 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #54: GFLOPs: 34.3437. Time: 39.4468 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #55: GFLOPs: 13.4926. Time: 100.4073 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #56: GFLOPs: 14.8740. Time: 91.0818 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #57: GFLOPs: 20.3976. Time: 66.4172 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #58: GFLOPs: 15.5996. Time: 86.8451 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #59: GFLOPs: 8.5911. Time: 157.6921 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #60: GFLOPs: 17.9171. Time: 75.6122 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #61: GFLOPs: 24.1274. Time: 56.1498 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #62: GFLOPs: 17.6922. Time: 76.5732 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #63: GFLOPs: 23.7326. Time: 57.0839 us. Best GFLOPs: 62.1929
2024-04-29 15:07:29 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_max_pool2d_7] Trial #64: GFLOPs: 15.7475. Time: 86.0295 us. Best GFLOPs: 62.1929
