2024-04-29 13:21:38 [INFO] [task_scheduler.cc:160] Initializing Task #43: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37"
2024-04-29 13:21:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(3), T.int64(7), T.int64(7)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:21:38 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:21:38 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(16), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                    T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 28, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 8, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 13:21:38 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(61), T.int64(33), T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), oh_0 * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), ow_1 * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(2)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(16), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_0 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), ow_1 * T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 28, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 8, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:21:38 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(16), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(112), T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(28) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 28, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 8, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 14:33:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:33:27 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:33:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 14:33:33 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:33:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 14:33:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 14:33:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 14:34:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 14:34:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9969  0.9963  0.9958  0.9950  0.9950  0.9947  0.9934  0.9920  0.9920  0.9907  0.9907  0.9904  0.9899  0.9898  0.9894
[17 : 32]:	0.9889  0.9889  0.9884  0.9876  0.9876  0.9875  0.9863  0.9862  0.9857  0.9856  0.9849  0.9845  0.9841  0.9836  0.9815  0.9799
[33 : 48]:	0.9799  0.9785  0.9784  0.9784  0.9776  0.9775  0.9763  0.9746  0.9745  0.9739  0.9737  0.9719  0.9718  0.9718  0.9718  0.9711
[49 : 64]:	0.9703  0.9678  0.9676  0.9675  0.9675  0.9660  0.9658  0.9658  0.9656  0.9650  0.9638  0.9634  0.9630  0.9630  0.9629  0.9628
2024-04-29 14:34:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:34:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #1: GFLOPs: 58.3982. Time: 4069.1894 us. Best GFLOPs: 58.3982
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #2: GFLOPs: 17.9028. Time: 13273.5477 us. Best GFLOPs: 58.3982
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #3: GFLOPs: 42.0306. Time: 5653.8242 us. Best GFLOPs: 58.3982
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #4: GFLOPs: 386.7750. Time: 614.3973 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #5: GFLOPs: 58.6197. Time: 4053.8146 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #6: GFLOPs: 47.3757. Time: 5015.9326 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(37), T.int64(229)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(32) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(32)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(16) + oh_1 * T.int64(16) + oh_2_init * T.int64(8) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(8) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(16) + oh_1 * T.int64(16) + oh_2 * T.int64(8) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(112) + ow_1 * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 8])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 2, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b113)
b138 = sch.decompose_reduction(block=b113, loop=l122)
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #8: GFLOPs: 60.1484. Time: 3950.7883 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #9: GFLOPs: 182.3497. Time: 1303.1746 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #10: GFLOPs: 21.8877. Time: 10856.9606 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #11: GFLOPs: 7.9532. Time: 29878.8180 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #12: GFLOPs: 79.9716. Time: 2971.4725 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #13: GFLOPs: 96.5000. Time: 2462.5225 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #14: GFLOPs: 136.3996. Time: 1742.1865 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #15: GFLOPs: 85.3456. Time: 2784.3667 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #16: GFLOPs: 17.6517. Time: 13462.3669 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #17: GFLOPs: 21.4865. Time: 11059.6688 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #18: GFLOPs: 194.7252. Time: 1220.3534 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #19: GFLOPs: 99.4088. Time: 2390.4670 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #20: GFLOPs: 26.6202. Time: 8926.8178 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #21: GFLOPs: 74.2586. Time: 3200.0799 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #22: GFLOPs: 59.1126. Time: 4020.0142 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #23: GFLOPs: 4.4258. Time: 53693.1587 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(16) * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0 in T.grid(T.int64(3), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(15), T.int64(61), T.int64(1)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(16) * T.int64(16) + kh_0 + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ic_0 + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
                for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(16) * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 7, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b67)
l87 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
l112 = sch.fuse(l107, l108, l109, l110, l111, preserve_unit_iters=True)
l113, l114 = sch.split(loop=l112, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l113)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b115)
b133 = sch.decompose_reduction(block=b115, loop=l117)
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #25: GFLOPs: 16.7110. Time: 14220.1705 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #26: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(229), T.int64(61)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(28), T.int64(8)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(16) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(28) + ow_1 + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(16) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(28) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                                v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                                v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(112), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(112), ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(4) * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 8, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 28, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81 = sch.fuse(l79, preserve_unit_iters=True)
sch.vectorize(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b115)
b139 = sch.decompose_reduction(block=b115, loop=l123)
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #27: GFLOPs: 10.6181. Time: 22380.1060 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #28: GFLOPs: 27.7766. Time: 8555.1714 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #29: GFLOPs: 8.2409. Time: 28835.9615 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #30: GFLOPs: 33.5936. Time: 7073.7715 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #31: GFLOPs: 56.9032. Time: 4176.0998 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #32: GFLOPs: 100.2020. Time: 2371.5455 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #33: GFLOPs: 6.7945. Time: 34974.4237 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(61), T.int64(229)):
                    for ax4_fused in T.vectorized(T.int64(3)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(56) + ax2)
                            v_i3 = T.axis.spatial(T.int64(230), ax3)
                            v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(112) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), ow_1 * T.int64(112) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(112)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 4, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 8, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l110)
l111 = sch.fuse(l109, preserve_unit_iters=True)
sch.vectorize(loop=l111)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b70)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b119)
b142 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #35: GFLOPs: 72.3397. Time: 3284.9679 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #36: GFLOPs: 88.2056. Time: 2694.0854 us. Best GFLOPs: 386.7750
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #37: GFLOPs: 408.8969. Time: 581.1576 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #38: GFLOPs: 101.5379. Time: 2340.3431 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #39: GFLOPs: 10.2537. Time: 23175.3774 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #40: GFLOPs: 166.7178. Time: 1425.3643 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #41: GFLOPs: 72.2874. Time: 3287.3418 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #42: GFLOPs: 18.2324. Time: 13033.5761 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #43: GFLOPs: 167.7062. Time: 1416.9637 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #44: GFLOPs: 16.3793. Time: 14508.1894 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #45: GFLOPs: 28.0781. Time: 8463.2963 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #46: GFLOPs: 14.1146. Time: 16836.0629 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #47: GFLOPs: 9.6671. Time: 24581.7216 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #48: GFLOPs: 0.4317. Time: 550455.3840 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #49: GFLOPs: 23.9371. Time: 9927.4260 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #50: GFLOPs: 81.4164. Time: 2918.7431 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #51: GFLOPs: 5.7205. Time: 41540.7470 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #52: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(128) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(64) * T.int64(56) + oh_2_init * T.int64(28) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(128) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(64) * T.int64(56) + oh_2 * T.int64(28) + oh_3)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(56), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(128) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(64) * T.int64(56) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 28])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #53: GFLOPs: 47.9710. Time: 4953.6934 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #54: GFLOPs: 106.3812. Time: 2233.7921 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #55: GFLOPs: 31.9391. Time: 7440.2056 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(117), T.int64(229)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(112) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(56), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(56) + oh_1 * T.int64(56) + oh_2_init * T.int64(56) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(8) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(56) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(8) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 56])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 8, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b113)
b138 = sch.decompose_reduction(block=b113, loop=l122)
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #57: GFLOPs: 26.3834. Time: 9006.9504 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #58: GFLOPs: 186.9915. Time: 1270.8251 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #59: GFLOPs: 15.0152. Time: 15826.1686 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #60: GFLOPs: 115.3376. Time: 2060.3301 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #61: GFLOPs: 10.7882. Time: 22027.1596 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #62: GFLOPs: 4.3867. Time: 54171.0930 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #63: GFLOPs: 13.3655. Time: 17779.5722 us. Best GFLOPs: 408.8969
2024-04-29 15:06:53 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #64: GFLOPs: 12.7279. Time: 18670.3335 us. Best GFLOPs: 408.8969
2024-04-29 15:24:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:24:21 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-29 15:24:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 15:24:26 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-29 15:24:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 15:24:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 15:25:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 15:25:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 15:25:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9831  0.9831  0.9831  0.8896  0.8877  0.8877  0.8770  0.8770  0.8770  0.8770  0.8770  0.8770  0.8743  0.8558  0.8558  0.8426
[17 : 32]:	0.8426  0.8422  0.8358  0.8358  0.8305  0.8305  0.8151  0.8043  0.7942  0.7543  0.7205  0.7135  0.6982  0.6946  0.6892  0.6879
[33 : 48]:	0.6866  0.6836  0.6819  0.6819  0.6819  0.6819  0.6819  0.6814  0.6792  0.6792  0.6753  0.6724  0.6702  0.6594  0.6594  0.6560
[49 : 64]:	0.6556  0.6556  0.6551  0.6543  0.6543  0.6543  0.6522  0.6519  0.6502  0.6497  0.6497  0.6497  0.6492  0.6492  0.6492  0.6487
2024-04-29 15:25:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:25:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #65: GFLOPs: 70.9490. Time: 3349.3557 us. Best GFLOPs: 408.8969
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #66: GFLOPs: 74.8844. Time: 3173.3370 us. Best GFLOPs: 408.8969
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #67: GFLOPs: 309.7778. Time: 767.1097 us. Best GFLOPs: 408.8969
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #68: GFLOPs: 439.7786. Time: 540.3481 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #69: GFLOPs: 32.3603. Time: 7343.3598 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #70: GFLOPs: 64.2470. Time: 3698.7480 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #71: GFLOPs: 68.0331. Time: 3492.9094 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #72: GFLOPs: 31.0316. Time: 7657.7843 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #73: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(112) * T.int64(28) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(4) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(112) * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                    v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 14, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 28, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #74: GFLOPs: 35.7528. Time: 6646.5681 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #75: GFLOPs: 87.8022. Time: 2706.4638 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #76: GFLOPs: 68.7368. Time: 3457.1522 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #77: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(896) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(4) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(896) // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(896) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(896) // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                    v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 14, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 28, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #78: GFLOPs: 72.2058. Time: 3291.0601 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #79: GFLOPs: 96.5406. Time: 2461.4870 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #80: GFLOPs: 56.4658. Time: 4208.4538 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #81: GFLOPs: 23.2336. Time: 10227.9963 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #82: GFLOPs: 48.6576. Time: 4883.7935 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #83: GFLOPs: 67.0158. Time: 3545.9355 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #84: GFLOPs: 30.3674. Time: 7825.2825 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #85: GFLOPs: 78.7825. Time: 3016.3251 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #86: GFLOPs: 18.7029. Time: 12705.7291 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #87: GFLOPs: 109.1496. Time: 2177.1352 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #88: GFLOPs: 21.8690. Time: 10866.2103 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #89: GFLOPs: 11.0146. Time: 21574.4839 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #90: GFLOPs: 11.6984. Time: 20313.3818 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #91: GFLOPs: 48.3988. Time: 4909.9026 us. Best GFLOPs: 439.7786
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #92: GFLOPs: 521.5091. Time: 455.6652 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #93: GFLOPs: 100.4281. Time: 2366.2054 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #94: GFLOPs: 140.6150. Time: 1689.9584 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #95: GFLOPs: 154.6283. Time: 1536.8048 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #96: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(13)):
                for ax3_ax4_fused in T.vectorized(T.int64(39)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(224) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(8) * T.int64(8) + ax3_ax4_fused // T.int64(3))
                        v_i4 = T.axis.spatial(T.int64(3), ax3_ax4_fused % T.int64(3))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(8) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(8) * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 2, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l81, l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b113)
b133 = sch.decompose_reduction(block=b113, loop=l117)
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #97: GFLOPs: 483.4997. Time: 491.4864 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #98: GFLOPs: 421.7835. Time: 563.4016 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #99: GFLOPs: 59.3228. Time: 4005.7696 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #100: GFLOPs: 65.8077. Time: 3611.0302 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #101: GFLOPs: 32.1605. Time: 7388.9859 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #102: GFLOPs: 31.9724. Time: 7432.4598 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #103: GFLOPs: 46.7033. Time: 5088.1487 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #104: GFLOPs: 16.9187. Time: 14045.6386 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #105: GFLOPs: 82.1131. Time: 2893.9801 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #106: GFLOPs: 104.7517. Time: 2268.5410 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #107: GFLOPs: 123.5780. Time: 1922.9431 us. Best GFLOPs: 521.5091
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #108: GFLOPs: 606.2270. Time: 391.9877 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #109: GFLOPs: 18.8195. Time: 12626.9764 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #110: GFLOPs: 105.7219. Time: 2247.7238 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #111: GFLOPs: 90.3309. Time: 2630.7009 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #112: GFLOPs: 36.0077. Time: 6599.5240 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #113: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(33)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(896) // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(896) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(896) // T.int64(224) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(896) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(896) // T.int64(224) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 14, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 7, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b113)
b133 = sch.decompose_reduction(block=b113, loop=l117)
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #114: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(33)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(896) // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(896) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(896) // T.int64(224) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(896) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(896) // T.int64(224) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 14, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 1, 7, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b113)
b133 = sch.decompose_reduction(block=b113, loop=l117)
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #115: GFLOPs: 105.8898. Time: 2244.1589 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #116: GFLOPs: 155.8811. Time: 1524.4535 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #117: GFLOPs: 166.5440. Time: 1426.8517 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #118: GFLOPs: 155.2923. Time: 1530.2337 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #119: GFLOPs: 164.0784. Time: 1448.2926 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #120: GFLOPs: 484.4699. Time: 490.5022 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #121: GFLOPs: 37.3245. Time: 6366.6889 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #122: GFLOPs: 178.7962. Time: 1329.0751 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #123: GFLOPs: 176.6755. Time: 1345.0284 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #124: GFLOPs: 178.8174. Time: 1328.9170 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #125: GFLOPs: 120.7670. Time: 1967.7030 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #126: GFLOPs: 32.6244. Time: 7283.9131 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #127: GFLOPs: 70.6109. Time: 3365.3934 us. Best GFLOPs: 606.2270
2024-04-29 15:26:56 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #128: GFLOPs: 24.2286. Time: 9807.9702 us. Best GFLOPs: 606.2270
2024-04-29 16:14:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:14:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 16:14:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 16:14:20 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 16:14:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 16:14:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 16:14:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 16:15:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 16:15:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9976  0.9827  0.9827  0.9424  0.9424  0.8798  0.8772  0.8736  0.8710  0.8710  0.8706  0.8683  0.8534  0.8524  0.8524  0.8484
[17 : 32]:	0.8394  0.8357  0.8350  0.8292  0.8211  0.8135  0.8092  0.8053  0.8009  0.7945  0.7945  0.7934  0.7922  0.7758  0.7633  0.7617
[33 : 48]:	0.7400  0.7395  0.7372  0.7366  0.7363  0.7362  0.7349  0.7349  0.7327  0.7302  0.7281  0.7281  0.7279  0.7271  0.7259  0.7259
[49 : 64]:	0.7244  0.7222  0.7202  0.7202  0.7202  0.7202  0.7202  0.7194  0.7144  0.7056  0.7053  0.7022  0.6999  0.6984  0.6958  0.6958
2024-04-29 16:15:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:15:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #129: GFLOPs: 542.0262. Time: 438.4171 us. Best GFLOPs: 606.2270
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #130: GFLOPs: 590.5348. Time: 402.4039 us. Best GFLOPs: 606.2270
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #131: GFLOPs: 612.2311. Time: 388.1435 us. Best GFLOPs: 612.2311
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #132: GFLOPs: 576.5169. Time: 412.1883 us. Best GFLOPs: 612.2311
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #133: GFLOPs: 611.5989. Time: 388.5448 us. Best GFLOPs: 612.2311
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #134: GFLOPs: 597.7190. Time: 397.5673 us. Best GFLOPs: 612.2311
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #135: GFLOPs: 502.8090. Time: 472.6120 us. Best GFLOPs: 612.2311
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #136: GFLOPs: 676.6887. Time: 351.1711 us. Best GFLOPs: 676.6887
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #137: GFLOPs: 729.0031. Time: 325.9705 us. Best GFLOPs: 729.0031
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #138: GFLOPs: 777.9225. Time: 305.4720 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #139: GFLOPs: 588.5240. Time: 403.7788 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #140: GFLOPs: 600.2512. Time: 395.8901 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #141: GFLOPs: 494.5908. Time: 480.4649 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #142: GFLOPs: 142.8515. Time: 1663.5007 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #143: GFLOPs: 142.8882. Time: 1663.0732 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #144: GFLOPs: 530.6151. Time: 447.8454 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #145: GFLOPs: 590.5612. Time: 402.3860 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #146: GFLOPs: 126.3588. Time: 1880.6249 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #147: GFLOPs: 622.7608. Time: 381.5808 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #148: GFLOPs: 743.2409. Time: 319.7261 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #149: GFLOPs: 532.5016. Time: 446.2588 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #150: GFLOPs: 486.5277. Time: 488.4276 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #151: GFLOPs: 770.2927. Time: 308.4977 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #152: GFLOPs: 484.5463. Time: 490.4249 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #153: GFLOPs: 519.9769. Time: 457.0079 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #154: GFLOPs: 139.3185. Time: 1705.6860 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #155: GFLOPs: 137.0956. Time: 1733.3423 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #156: GFLOPs: 139.0629. Time: 1708.8208 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #157: GFLOPs: 136.8246. Time: 1736.7746 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #158: GFLOPs: 651.9412. Time: 364.5015 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #159: GFLOPs: 546.2765. Time: 435.0060 us. Best GFLOPs: 777.9225
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #160: GFLOPs: 817.4321. Time: 290.7074 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #161: GFLOPs: 143.8792. Time: 1651.6181 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #162: GFLOPs: 76.4696. Time: 3107.5538 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #163: GFLOPs: 76.6095. Time: 3101.8814 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #164: GFLOPs: 522.6144. Time: 454.7014 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #165: GFLOPs: 646.7281. Time: 367.4396 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #166: GFLOPs: 523.3765. Time: 454.0394 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #167: GFLOPs: 160.6159. Time: 1479.5142 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #168: GFLOPs: 166.0860. Time: 1430.7863 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #169: GFLOPs: 160.8815. Time: 1477.0717 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #170: GFLOPs: 486.6404. Time: 488.3144 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #171: GFLOPs: 160.4529. Time: 1481.0170 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #172: GFLOPs: 157.7754. Time: 1506.1508 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #173: GFLOPs: 488.4728. Time: 486.4826 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #174: GFLOPs: 601.6214. Time: 394.9885 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #175: GFLOPs: 157.1455. Time: 1512.1880 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #176: GFLOPs: 160.9930. Time: 1476.0484 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #177: GFLOPs: 142.2478. Time: 1670.5607 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #178: GFLOPs: 142.5959. Time: 1666.4819 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #179: GFLOPs: 172.3122. Time: 1379.0873 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #180: GFLOPs: 175.8558. Time: 1351.2974 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #181: GFLOPs: 166.8761. Time: 1424.0118 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #182: GFLOPs: 177.4476. Time: 1339.1762 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #183: GFLOPs: 176.3612. Time: 1347.4255 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #184: GFLOPs: 145.2173. Time: 1636.3991 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #185: GFLOPs: 558.3463. Time: 425.6025 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #186: GFLOPs: 446.1444. Time: 532.6382 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #187: GFLOPs: 154.6420. Time: 1536.6690 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #188: GFLOPs: 145.0023. Time: 1638.8261 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #189: GFLOPs: 144.5659. Time: 1643.7729 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #190: GFLOPs: 296.1305. Time: 802.4622 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #191: GFLOPs: 108.0451. Time: 2199.3914 us. Best GFLOPs: 817.4321
2024-04-29 16:16:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #192: GFLOPs: 51.7031. Time: 4596.1143 us. Best GFLOPs: 817.4321
2024-04-29 17:36:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:36:29 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:36:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 17:36:34 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:36:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 17:37:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 17:37:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 17:37:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 17:37:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1377  1.0467  1.0446  0.9947  0.9694  0.9694  0.9633  0.9554  0.9428  0.9344  0.9343  0.9277  0.9271  0.9271  0.9156  0.9128
[17 : 32]:	0.9101  0.9093  0.9050  0.9032  0.8902  0.8902  0.8853  0.8845  0.8833  0.8817  0.8720  0.8601  0.8598  0.8395  0.8393  0.8389
[33 : 48]:	0.8382  0.8364  0.8351  0.8350  0.8334  0.8314  0.8300  0.8166  0.8166  0.8154  0.8154  0.8121  0.8094  0.8086  0.8082  0.8076
[49 : 64]:	0.7999  0.7981  0.7953  0.7947  0.7939  0.7919  0.7919  0.7919  0.7905  0.7904  0.7874  0.7874  0.7815  0.7800  0.7780  0.7761
2024-04-29 17:37:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:37:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #193: GFLOPs: 903.5651. Time: 262.9955 us. Best GFLOPs: 903.5651
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #194: GFLOPs: 920.8158. Time: 258.0685 us. Best GFLOPs: 920.8158
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #195: GFLOPs: 941.4517. Time: 252.4118 us. Best GFLOPs: 941.4517
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #196: GFLOPs: 726.8883. Time: 326.9189 us. Best GFLOPs: 941.4517
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #197: GFLOPs: 815.3158. Time: 291.4619 us. Best GFLOPs: 941.4517
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #198: GFLOPs: 816.1314. Time: 291.1707 us. Best GFLOPs: 941.4517
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #199: GFLOPs: 844.2636. Time: 281.4684 us. Best GFLOPs: 941.4517
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #200: GFLOPs: 835.9168. Time: 284.2789 us. Best GFLOPs: 941.4517
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #201: GFLOPs: 943.3558. Time: 251.9023 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #202: GFLOPs: 783.1576. Time: 303.4300 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #203: GFLOPs: 766.1543. Time: 310.1641 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #204: GFLOPs: 716.0637. Time: 331.8609 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #205: GFLOPs: 771.1464. Time: 308.1562 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #206: GFLOPs: 758.0032. Time: 313.4994 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #207: GFLOPs: 817.9735. Time: 290.5150 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #208: GFLOPs: 764.3390. Time: 310.9007 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #209: GFLOPs: 777.6064. Time: 305.5962 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #210: GFLOPs: 712.8329. Time: 333.3650 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #211: GFLOPs: 819.7213. Time: 289.8955 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #212: GFLOPs: 552.1946. Time: 430.3438 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #213: GFLOPs: 735.5914. Time: 323.0510 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #214: GFLOPs: 719.4688. Time: 330.2903 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #215: GFLOPs: 737.9606. Time: 322.0139 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #216: GFLOPs: 791.0563. Time: 300.4003 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #217: GFLOPs: 804.4916. Time: 295.3835 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #218: GFLOPs: 674.8613. Time: 352.1220 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #219: GFLOPs: 735.0401. Time: 323.2933 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #220: GFLOPs: 790.3546. Time: 300.6670 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #221: GFLOPs: 629.4281. Time: 377.5388 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #222: GFLOPs: 760.5447. Time: 312.4517 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #223: GFLOPs: 598.3793. Time: 397.1286 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #224: GFLOPs: 752.9335. Time: 315.6102 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #225: GFLOPs: 811.0920. Time: 292.9798 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #226: GFLOPs: 724.3948. Time: 328.0442 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #227: GFLOPs: 69.8439. Time: 3402.3526 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #228: GFLOPs: 509.9706. Time: 465.9750 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #229: GFLOPs: 562.2574. Time: 422.6419 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #230: GFLOPs: 898.7711. Time: 264.3983 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #231: GFLOPs: 568.6229. Time: 417.9106 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #232: GFLOPs: 455.4295. Time: 521.7790 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #233: GFLOPs: 449.2356. Time: 528.9731 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #234: GFLOPs: 369.1322. Time: 643.7626 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #235: GFLOPs: 677.7864. Time: 350.6024 us. Best GFLOPs: 943.3558
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #236: GFLOPs: 1010.2961. Time: 235.2118 us. Best GFLOPs: 1010.2961
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #237: GFLOPs: 1066.8835. Time: 222.7362 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #238: GFLOPs: 777.6694. Time: 305.5714 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #239: GFLOPs: 542.2093. Time: 438.2690 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #240: GFLOPs: 671.4388. Time: 353.9169 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #241: GFLOPs: 729.7245. Time: 325.6483 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #242: GFLOPs: 799.3107. Time: 297.2981 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #243: GFLOPs: 1051.2029. Time: 226.0587 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #244: GFLOPs: 800.2464. Time: 296.9505 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #245: GFLOPs: 596.1560. Time: 398.6097 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #246: GFLOPs: 1053.5845. Time: 225.5477 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #247: GFLOPs: 919.4286. Time: 258.4578 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #248: GFLOPs: 923.7188. Time: 257.2574 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #249: GFLOPs: 598.0828. Time: 397.3255 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #250: GFLOPs: 519.8954. Time: 457.0795 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #251: GFLOPs: 775.3859. Time: 306.4713 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #252: GFLOPs: 784.7361. Time: 302.8197 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #253: GFLOPs: 645.1840. Time: 368.3190 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #254: GFLOPs: 126.2123. Time: 1882.8086 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #255: GFLOPs: 140.5216. Time: 1691.0814 us. Best GFLOPs: 1066.8835
2024-04-29 17:39:24 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #256: GFLOPs: 175.5449. Time: 1353.6909 us. Best GFLOPs: 1066.8835
2024-04-29 18:00:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:01:01 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:01:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 18:01:05 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:01:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 18:01:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 18:01:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 18:01:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3458958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6a6e648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7929228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34c26a8)]: 0 failure(s)
2024-04-29 18:02:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9723  0.9690  0.9690  0.9690  0.9690  0.9690  0.9566  0.9546  0.9546  0.9546  0.9546  0.9546  0.9546  0.9358  0.9358  0.9338
[17 : 32]:	0.9338  0.9338  0.9338  0.9338  0.9332  0.9123  0.9123  0.9123  0.9110  0.8793  0.8793  0.8793  0.8772  0.8772  0.8583  0.8557
[33 : 48]:	0.8520  0.8491  0.8491  0.8460  0.8460  0.8460  0.8452  0.8452  0.8452  0.8440  0.8322  0.8304  0.8273  0.8217  0.8217  0.8213
[49 : 64]:	0.8180  0.8102  0.8002  0.7997  0.7969  0.7967  0.7966  0.7949  0.7949  0.7919  0.7893  0.7815  0.7810  0.7784  0.7682  0.7682
2024-04-29 18:02:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:02:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #257: GFLOPs: 201.4469. Time: 1179.6336 us. Best GFLOPs: 1066.8835
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #258: GFLOPs: 211.8413. Time: 1121.7525 us. Best GFLOPs: 1066.8835
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #259: GFLOPs: 740.6166. Time: 320.8590 us. Best GFLOPs: 1066.8835
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #260: GFLOPs: 1095.6776. Time: 216.8827 us. Best GFLOPs: 1095.6776
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #261: GFLOPs: 215.0842. Time: 1104.8397 us. Best GFLOPs: 1095.6776
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #262: GFLOPs: 753.6616. Time: 315.3053 us. Best GFLOPs: 1095.6776
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #263: GFLOPs: 1096.4051. Time: 216.7388 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #264: GFLOPs: 566.1494. Time: 419.7364 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #265: GFLOPs: 988.2039. Time: 240.4702 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #266: GFLOPs: 1092.9256. Time: 217.4288 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #267: GFLOPs: 201.9938. Time: 1176.4398 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #268: GFLOPs: 983.4428. Time: 241.6343 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #269: GFLOPs: 1091.2237. Time: 217.7679 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #270: GFLOPs: 918.4274. Time: 258.7396 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #271: GFLOPs: 130.2827. Time: 1823.9837 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #272: GFLOPs: 783.3740. Time: 303.3462 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #273: GFLOPs: 130.4678. Time: 1821.3959 us. Best GFLOPs: 1096.4051
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #274: GFLOPs: 1104.1149. Time: 215.2254 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #275: GFLOPs: 926.9375. Time: 256.3641 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #276: GFLOPs: 130.5448. Time: 1820.3214 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #277: GFLOPs: 1000.5354. Time: 237.5064 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #278: GFLOPs: 131.7187. Time: 1804.0983 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #279: GFLOPs: 800.6150. Time: 296.8137 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #280: GFLOPs: 1092.6765. Time: 217.4784 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #281: GFLOPs: 131.5005. Time: 1807.0920 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #282: GFLOPs: 94.0220. Time: 2527.4251 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #283: GFLOPs: 425.1786. Time: 558.9028 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #284: GFLOPs: 93.2408. Time: 2548.5994 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #285: GFLOPs: 754.1863. Time: 315.0860 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #286: GFLOPs: 828.2027. Time: 286.9268 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #287: GFLOPs: 832.7638. Time: 285.3553 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #288: GFLOPs: 958.7875. Time: 247.8480 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #289: GFLOPs: 912.9475. Time: 260.2927 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #290: GFLOPs: 774.5364. Time: 306.8074 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #291: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(28) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(61), T.int64(7), T.int64(1)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ic_0 + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(28)):
                for ax3_ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(28) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14))
                        v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 7, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #292: GFLOPs: 99.2781. Time: 2393.6155 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #293: GFLOPs: 104.7996. Time: 2267.5039 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #294: GFLOPs: 585.3123. Time: 405.9944 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #295: GFLOPs: 963.8345. Time: 246.5501 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #296: GFLOPs: 982.5687. Time: 241.8493 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #297: GFLOPs: 976.8728. Time: 243.2594 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #298: GFLOPs: 925.5805. Time: 256.7400 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #299: GFLOPs: 973.3543. Time: 244.1388 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #300: GFLOPs: 922.8183. Time: 257.5085 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #301: GFLOPs: 625.4593. Time: 379.9345 us. Best GFLOPs: 1104.1149
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #302: GFLOPs: 1147.2032. Time: 207.1416 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #303: GFLOPs: 210.1258. Time: 1130.9110 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #304: GFLOPs: 821.3099. Time: 289.3348 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #305: GFLOPs: 129.8726. Time: 1829.7439 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #306: GFLOPs: 701.7357. Time: 338.6368 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #307: GFLOPs: 982.2554. Time: 241.9264 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #308: GFLOPs: 833.1948. Time: 285.2077 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #309: GFLOPs: 938.9928. Time: 253.0728 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #310: GFLOPs: 859.1511. Time: 276.5911 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #311: GFLOPs: 1095.6915. Time: 216.8800 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #312: GFLOPs: 822.3819. Time: 288.9576 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #313: GFLOPs: 690.4791. Time: 344.1575 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #314: GFLOPs: 812.7686. Time: 292.3754 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #315: GFLOPs: 599.5473. Time: 396.3549 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #316: GFLOPs: 603.9936. Time: 393.4371 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #317: GFLOPs: 134.6365. Time: 1765.0009 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #318: GFLOPs: 26.1967. Time: 9071.1171 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #319: GFLOPs: 6.8491. Time: 34695.7793 us. Best GFLOPs: 1147.2032
2024-04-29 18:03:57 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #320: GFLOPs: 132.0221. Time: 1799.9524 us. Best GFLOPs: 1147.2032
