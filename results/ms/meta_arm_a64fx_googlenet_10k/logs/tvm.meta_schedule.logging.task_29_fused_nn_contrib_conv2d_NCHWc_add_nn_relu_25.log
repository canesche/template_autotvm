2024-04-29 13:20:38 [INFO] [task_scheduler.cc:160] Initializing Task #29: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25"
2024-04-29 13:20:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(4), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(4), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4), T.int64(16), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:20:38 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:20:38 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(4), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(2)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(4), ic_0 // T.int64(2) + ax1)
                        v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ow_0 * T.int64(7) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ic_0 % T.int64(2) * T.int64(2) + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(16), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:38 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(4), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(9), T.int64(9), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ow_0 * T.int64(7) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(16), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(12), oc_chunk_1 * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:38 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(4), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(4), T.int64(16), T.int64(16), T.int64(4)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(16), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 3, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 14:09:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:09:31 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:09:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65119d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x630ae18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x759e788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3cf4178)]: 0 failure(s)
2024-04-29 14:09:36 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:09:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65119d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x630ae18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x759e788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3cf4178)]: 0 failure(s)
2024-04-29 14:09:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65119d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x630ae18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x759e788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3cf4178)]: 0 failure(s)
2024-04-29 14:09:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65119d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x630ae18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x759e788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3cf4178)]: 0 failure(s)
2024-04-29 14:09:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x65119d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x630ae18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x759e788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3cf4178)]: 0 failure(s)
2024-04-29 14:10:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9988  0.9988  0.9986  0.9986  0.9982  0.9980  0.9979  0.9976  0.9975  0.9959  0.9957  0.9955  0.9952  0.9951  0.9951
[17 : 32]:	0.9948  0.9943  0.9939  0.9927  0.9927  0.9927  0.9920  0.9907  0.9907  0.9903  0.9895  0.9891  0.9879  0.9872  0.9870  0.9856
[33 : 48]:	0.9855  0.9852  0.9851  0.9846  0.9844  0.9842  0.9836  0.9820  0.9808  0.9806  0.9796  0.9794  0.9790  0.9790  0.9755  0.9750
[49 : 64]:	0.9746  0.9743  0.9742  0.9740  0.9737  0.9734  0.9726  0.9724  0.9720  0.9715  0.9708  0.9706  0.9703  0.9699  0.9697  0.9691
2024-04-29 14:10:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:10:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #1: GFLOPs: 12.0706. Time: 226.0304 us. Best GFLOPs: 12.0706
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #2: GFLOPs: 20.7046. Time: 131.7734 us. Best GFLOPs: 20.7046
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #3: GFLOPs: 8.1005. Time: 336.8098 us. Best GFLOPs: 20.7046
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #4: GFLOPs: 0.2545. Time: 10719.8795 us. Best GFLOPs: 20.7046
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #5: GFLOPs: 48.5847. Time: 56.1560 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #6: GFLOPs: 0.9564. Time: 2852.6172 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #7: GFLOPs: 1.3980. Time: 1951.5991 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(4), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(36)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), oh_1 * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(7) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_1 * T.int64(12) + oc_chunk_2_init * T.int64(12) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(12) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(16), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 12])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b70)
l117 = sch.fuse(l115, l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #9: GFLOPs: 7.5914. Time: 359.3963 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #10: GFLOPs: 14.4677. Time: 188.5796 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #11: GFLOPs: 42.1746. Time: 64.6910 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #12: GFLOPs: 20.5610. Time: 132.6939 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #13: GFLOPs: 6.5868. Time: 414.2088 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #14: GFLOPs: 16.7255. Time: 163.1238 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #15: GFLOPs: 22.8691. Time: 119.3017 us. Best GFLOPs: 48.5847
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #16: GFLOPs: 49.7117. Time: 54.8829 us. Best GFLOPs: 49.7117
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #17: GFLOPs: 39.2466. Time: 69.5173 us. Best GFLOPs: 49.7117
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #18: GFLOPs: 5.9304. Time: 460.0573 us. Best GFLOPs: 49.7117
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #19: GFLOPs: 37.9978. Time: 71.8021 us. Best GFLOPs: 49.7117
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #20: GFLOPs: 3.8620. Time: 706.4574 us. Best GFLOPs: 49.7117
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #21: GFLOPs: 7.4235. Time: 367.5254 us. Best GFLOPs: 49.7117
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #22: GFLOPs: 52.8354. Time: 51.6381 us. Best GFLOPs: 52.8354
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #23: GFLOPs: 41.0514. Time: 66.4610 us. Best GFLOPs: 52.8354
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #24: GFLOPs: 25.2620. Time: 108.0011 us. Best GFLOPs: 52.8354
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #25: GFLOPs: 7.5150. Time: 363.0501 us. Best GFLOPs: 52.8354
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #26: GFLOPs: 7.4360. Time: 366.9077 us. Best GFLOPs: 52.8354
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #27: GFLOPs: 82.3949. Time: 33.1127 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #28: GFLOPs: 4.3378. Time: 628.9621 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #29: GFLOPs: 81.7457. Time: 33.3757 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #30: GFLOPs: 25.5165. Time: 106.9239 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #31: GFLOPs: 5.4319. Time: 502.2765 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #32: GFLOPs: 17.9409. Time: 152.0724 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #33: GFLOPs: 14.2785. Time: 191.0795 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #34: GFLOPs: 2.4348. Time: 1120.5383 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #35: GFLOPs: 7.6491. Time: 356.6829 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #36: GFLOPs: 27.9659. Time: 97.5589 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #37: GFLOPs: 32.6890. Time: 83.4630 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #38: GFLOPs: 47.8655. Time: 56.9998 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #39: GFLOPs: 35.7400. Time: 76.3380 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #40: GFLOPs: 4.2477. Time: 642.2999 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #41: GFLOPs: 51.0146. Time: 53.4811 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #42: GFLOPs: 38.0875. Time: 71.6329 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #43: GFLOPs: 73.3190. Time: 37.2116 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #44: GFLOPs: 17.0677. Time: 159.8532 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #45: GFLOPs: 15.1957. Time: 179.5450 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #46: GFLOPs: 52.8280. Time: 51.6453 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #47: GFLOPs: 2.6176. Time: 1042.3179 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #48: GFLOPs: 27.1360. Time: 100.5425 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #49: GFLOPs: 39.5843. Time: 68.9243 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #50: GFLOPs: 1.9029. Time: 1433.7460 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #51: GFLOPs: 10.1398. Time: 269.0712 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #52: GFLOPs: 29.7009. Time: 91.8600 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #53: GFLOPs: 37.9510. Time: 71.8906 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #54: GFLOPs: 6.0867. Time: 448.2449 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #55: GFLOPs: 33.3584. Time: 81.7882 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #56: GFLOPs: 57.6023. Time: 47.3648 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #57: GFLOPs: 18.5357. Time: 147.1931 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #58: GFLOPs: 13.7957. Time: 197.7664 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #59: GFLOPs: 46.3277. Time: 58.8917 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #60: GFLOPs: 32.0004. Time: 85.2590 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #61: GFLOPs: 46.4930. Time: 58.6824 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #62: GFLOPs: 47.2700. Time: 57.7178 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #63: GFLOPs: 5.4481. Time: 500.7835 us. Best GFLOPs: 82.3949
2024-04-29 15:05:36 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_25] Trial #64: GFLOPs: 21.4383. Time: 127.2639 us. Best GFLOPs: 82.3949
