2024-04-29 13:21:29 [INFO] [task_scheduler.cc:160] Initializing Task #41: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35"
2024-04-29 13:21:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:21:29 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:21:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(7), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(6) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:21:29 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:21:29 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(28), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(24), oc_chunk_0 * T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:30:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:30:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:30:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 14:30:17 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:30:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 14:30:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 14:30:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 14:30:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 14:30:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9990  0.9986  0.9985  0.9984  0.9981  0.9977  0.9970  0.9966  0.9966  0.9966  0.9953  0.9949  0.9946  0.9945  0.9942
[17 : 32]:	0.9941  0.9918  0.9909  0.9898  0.9896  0.9893  0.9890  0.9888  0.9887  0.9886  0.9886  0.9884  0.9879  0.9878  0.9872  0.9870
[33 : 48]:	0.9870  0.9863  0.9862  0.9853  0.9843  0.9837  0.9835  0.9826  0.9825  0.9817  0.9806  0.9796  0.9796  0.9794  0.9785  0.9783
[49 : 64]:	0.9779  0.9779  0.9772  0.9765  0.9764  0.9759  0.9758  0.9752  0.9751  0.9748  0.9743  0.9740  0.9737  0.9730  0.9729  0.9715
2024-04-29 14:30:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:30:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #1: GFLOPs: 4.5260. Time: 6418.8896 us. Best GFLOPs: 4.5260
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #2: GFLOPs: 78.6206. Time: 369.5202 us. Best GFLOPs: 78.6206
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #3: GFLOPs: 88.5671. Time: 328.0212 us. Best GFLOPs: 88.5671
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #4: GFLOPs: 126.7204. Time: 229.2598 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #5: GFLOPs: 5.8343. Time: 4979.5238 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #6: GFLOPs: 45.7429. Time: 635.1134 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(84), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(24), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[6, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #8: GFLOPs: 105.4395. Time: 275.5315 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #9: GFLOPs: 80.5736. Time: 360.5636 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #10: GFLOPs: 1.6450. Time: 17660.7618 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #11: GFLOPs: 71.1584. Time: 408.2707 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #12: GFLOPs: 22.2462. Time: 1305.9268 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #13: GFLOPs: 4.1953. Time: 6924.7893 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #14: GFLOPs: 73.7969. Time: 393.6738 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #15: GFLOPs: 120.1851. Time: 241.7263 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #16: GFLOPs: 56.3587. Time: 515.4819 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #17: GFLOPs: 3.2833. Time: 8848.3860 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #18: GFLOPs: 99.2335. Time: 292.7630 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #19: GFLOPs: 10.0199. Time: 2899.4244 us. Best GFLOPs: 126.7204
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #20: GFLOPs: 173.1008. Time: 167.8323 us. Best GFLOPs: 173.1008
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #21: GFLOPs: 315.7370. Time: 92.0130 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #22: GFLOPs: 133.3462. Time: 217.8683 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(1344), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(336) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(42) // T.int64(14) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(336) // T.int64(168) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(168) // T.int64(42) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(336) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(42) // T.int64(14) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(336) // T.int64(168) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(168) // T.int64(42) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(24), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b102)
b122 = sch.decompose_reduction(block=b102, loop=l106)
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #24: GFLOPs: 75.6564. Time: 383.9980 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #25: GFLOPs: 73.3051. Time: 396.3150 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #26: GFLOPs: 2.9376. Time: 9889.6659 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #27: GFLOPs: 5.8758. Time: 4944.3080 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #28: GFLOPs: 148.5202. Time: 195.6092 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #29: GFLOPs: 85.6514. Time: 339.1879 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #30: GFLOPs: 15.6571. Time: 1855.5065 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #31: GFLOPs: 66.5476. Time: 436.5580 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(24), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(3) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(28) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(24), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(3) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(28) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1176)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(24), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[6, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #33: GFLOPs: 11.2661. Time: 2578.6991 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #34: GFLOPs: 33.5436. Time: 866.0928 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #35: GFLOPs: 6.1377. Time: 4733.3563 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #36: GFLOPs: 18.7930. Time: 1545.8893 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #37: GFLOPs: 48.9301. Time: 593.7433 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #38: GFLOPs: 80.9396. Time: 358.9333 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #39: GFLOPs: 78.4819. Time: 370.1732 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #40: GFLOPs: 12.8180. Time: 2266.4841 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #41: GFLOPs: 34.7676. Time: 835.6023 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #42: GFLOPs: 52.5299. Time: 553.0544 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #43: GFLOPs: 48.7438. Time: 596.0123 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #44: GFLOPs: 30.1136. Time: 964.7422 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #45: GFLOPs: 51.8772. Time: 560.0130 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #46: GFLOPs: 71.5776. Time: 405.8798 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #47: GFLOPs: 77.7549. Time: 373.6343 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #48: GFLOPs: 17.2880. Time: 1680.4649 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #49: GFLOPs: 60.0749. Time: 483.5949 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #50: GFLOPs: 129.4254. Time: 224.4683 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #51: GFLOPs: 82.5152. Time: 352.0793 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #52: GFLOPs: 34.6950. Time: 837.3523 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #53: GFLOPs: 28.7646. Time: 1009.9893 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #54: GFLOPs: 2.8387. Time: 10234.3277 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #55: GFLOPs: 89.1782. Time: 325.7736 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #56: GFLOPs: 49.3822. Time: 588.3077 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #57: GFLOPs: 8.0073. Time: 3628.1863 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #58: GFLOPs: 98.0932. Time: 296.1664 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #59: GFLOPs: 39.3262. Time: 738.7417 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #60: GFLOPs: 24.3020. Time: 1195.4528 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #61: GFLOPs: 1.5071. Time: 19276.8912 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #62: GFLOPs: 148.7270. Time: 195.3372 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #63: GFLOPs: 64.2457. Time: 452.2002 us. Best GFLOPs: 315.7370
2024-04-29 15:06:39 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #64: GFLOPs: 7.6072. Time: 3818.9773 us. Best GFLOPs: 315.7370
2024-04-29 17:41:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:41:59 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 17:42:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 17:42:01 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 17:42:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 17:42:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 17:42:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 17:42:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x69353a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dc0018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6242208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5992048)]: 0 failure(s)
2024-04-29 17:42:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9678  0.9109  0.8890  0.8738  0.8209  0.7839  0.7717  0.7654  0.7614  0.7338  0.7317  0.7239  0.7012  0.6913  0.6823  0.6586
[17 : 32]:	0.6498  0.6466  0.6450  0.6268  0.6254  0.6118  0.6024  0.5965  0.5937  0.5888  0.5865  0.5844  0.5757  0.5743  0.5683  0.5683
[33 : 48]:	0.5672  0.5661  0.5643  0.5534  0.5492  0.5483  0.5483  0.5344  0.5332  0.5303  0.5199  0.5130  0.5130  0.5076  0.5067  0.5060
[49 : 64]:	0.5060  0.5043  0.4992  0.4982  0.4978  0.4973  0.4944  0.4896  0.4895  0.4884  0.4869  0.4868  0.4860  0.4848  0.4847  0.4830
2024-04-29 17:42:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:42:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #65: GFLOPs: 76.4140. Time: 380.1911 us. Best GFLOPs: 315.7370
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #66: GFLOPs: 71.2143. Time: 407.9507 us. Best GFLOPs: 315.7370
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #67: GFLOPs: 347.5943. Time: 83.5799 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #68: GFLOPs: 346.4147. Time: 83.8645 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #69: GFLOPs: 89.2548. Time: 325.4942 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #70: GFLOPs: 120.7675. Time: 240.5607 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #71: GFLOPs: 87.3302. Time: 332.6673 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #72: GFLOPs: 159.3558. Time: 182.3084 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #73: GFLOPs: 146.8592. Time: 197.8215 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #74: GFLOPs: 103.5649. Time: 280.5187 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #75: GFLOPs: 138.8364. Time: 209.2527 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #76: GFLOPs: 102.1121. Time: 284.5099 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #77: GFLOPs: 65.9697. Time: 440.3825 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #78: GFLOPs: 107.7346. Time: 269.6617 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #79: GFLOPs: 154.6461. Time: 187.8605 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #80: GFLOPs: 156.7906. Time: 185.2912 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #81: GFLOPs: 158.2528. Time: 183.5791 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #82: GFLOPs: 97.1571. Time: 299.0198 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #83: GFLOPs: 167.9901. Time: 172.9382 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #84: GFLOPs: 161.3211. Time: 180.0874 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #85: GFLOPs: 208.1159. Time: 139.5948 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #86: GFLOPs: 206.9478. Time: 140.3828 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #87: GFLOPs: 113.9668. Time: 254.9155 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #88: GFLOPs: 149.2883. Time: 194.6027 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #89: GFLOPs: 111.3832. Time: 260.8285 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #90: GFLOPs: 115.9090. Time: 250.6440 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #91: GFLOPs: 205.5861. Time: 141.3126 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #92: GFLOPs: 119.5983. Time: 242.9124 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #93: GFLOPs: 207.1801. Time: 140.2254 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #94: GFLOPs: 236.1685. Time: 123.0135 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #95: GFLOPs: 108.8271. Time: 266.9546 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #96: GFLOPs: 108.8109. Time: 266.9944 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #97: GFLOPs: 121.6657. Time: 238.7846 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #98: GFLOPs: 103.4029. Time: 280.9582 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #99: GFLOPs: 114.2556. Time: 254.2712 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #100: GFLOPs: 146.2799. Time: 198.6049 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #101: GFLOPs: 41.1105. Time: 706.6783 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #102: GFLOPs: 95.2388. Time: 305.0429 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #103: GFLOPs: 95.4897. Time: 304.2413 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #104: GFLOPs: 127.6542. Time: 227.5827 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #105: GFLOPs: 65.3151. Time: 444.7960 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #106: GFLOPs: 64.9675. Time: 447.1763 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #107: GFLOPs: 137.1606. Time: 211.8094 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #108: GFLOPs: 82.7296. Time: 351.1669 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #109: GFLOPs: 71.5827. Time: 405.8508 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #110: GFLOPs: 104.6933. Time: 277.4953 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #111: GFLOPs: 64.9586. Time: 447.2371 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #112: GFLOPs: 159.1826. Time: 182.5068 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #113: GFLOPs: 159.9669. Time: 181.6119 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #114: GFLOPs: 171.6356. Time: 169.2650 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #115: GFLOPs: 137.6474. Time: 211.0602 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #116: GFLOPs: 264.4521. Time: 109.8569 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #117: GFLOPs: 168.8189. Time: 172.0892 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #118: GFLOPs: 120.3525. Time: 241.3901 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #119: GFLOPs: 111.1977. Time: 261.2636 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #120: GFLOPs: 115.0122. Time: 252.5985 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #121: GFLOPs: 139.0835. Time: 208.8810 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #122: GFLOPs: 164.3131. Time: 176.8082 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #123: GFLOPs: 111.6173. Time: 260.2814 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #124: GFLOPs: 169.3211. Time: 171.5788 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #125: GFLOPs: 100.6607. Time: 288.6121 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #126: GFLOPs: 118.0837. Time: 246.0281 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #127: GFLOPs: 113.9870. Time: 254.8704 us. Best GFLOPs: 347.5943
2024-04-29 17:44:05 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_35] Trial #128: GFLOPs: 81.5866. Time: 356.0868 us. Best GFLOPs: 347.5943
