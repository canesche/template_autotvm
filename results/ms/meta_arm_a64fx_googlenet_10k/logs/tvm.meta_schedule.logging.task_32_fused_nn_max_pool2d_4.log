2024-04-29 13:20:52 [INFO] [task_scheduler.cc:160] Initializing Task #32: "fused_nn_max_pool2d_4"
2024-04-29 13:20:52 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(29) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(29), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
2024-04-29 13:20:52 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:20:52 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)):
                with T.block("pad_temp"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                    T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(29) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(29), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:52 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)):
                with T.block("pad_temp"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                    T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(29) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(29), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:52 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(30), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(30), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(29) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(29), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 14:15:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:15:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:15:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6522458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74918e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7960328)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a43d78)]: 0 failure(s)
2024-04-29 14:15:14 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:15:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6522458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74918e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7960328)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a43d78)]: 0 failure(s)
2024-04-29 14:15:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6522458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74918e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7960328)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a43d78)]: 0 failure(s)
2024-04-29 14:15:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6522458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74918e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7960328)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a43d78)]: 0 failure(s)
2024-04-29 14:15:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6522458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74918e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7960328)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6a43d78)]: 0 failure(s)
2024-04-29 14:15:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9973  0.9965  0.9913  0.9889  0.9805  0.9640  0.9640  0.9630  0.9625  0.9608  0.9595  0.9587  0.9409  0.9381  0.9300  0.9275
[17 : 32]:	0.9147  0.9138  0.9097  0.9069  0.9058  0.9034  0.8854  0.8774  0.8730  0.8650  0.8619  0.8617  0.8605  0.8581  0.8540  0.8526
[33 : 48]:	0.8524  0.8463  0.8302  0.8300  0.8275  0.8190  0.8172  0.8103  0.7884  0.7856  0.7843  0.7830  0.7810  0.7633  0.7580  0.7485
[49 : 64]:	0.7484  0.7480  0.7455  0.7426  0.7425  0.7384  0.7367  0.7352  0.7350  0.7346  0.7226  0.7080  0.7045  0.7034  0.6916  0.6898
2024-04-29 14:15:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:15:32 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #1: GFLOPs: 14.1700. Time: 127.4763 us. Best GFLOPs: 14.1700
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #2: GFLOPs: 8.0161. Time: 225.3393 us. Best GFLOPs: 14.1700
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #3: GFLOPs: 7.6081. Time: 237.4220 us. Best GFLOPs: 14.1700
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #4: GFLOPs: 7.5354. Time: 239.7123 us. Best GFLOPs: 14.1700
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #5: GFLOPs: 12.9320. Time: 139.6792 us. Best GFLOPs: 14.1700
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #6: GFLOPs: 14.4956. Time: 124.6130 us. Best GFLOPs: 14.4956
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #7: GFLOPs: 11.6577. Time: 154.9482 us. Best GFLOPs: 14.4956
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #8: GFLOPs: 19.2602. Time: 93.7862 us. Best GFLOPs: 19.2602
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #9: GFLOPs: 13.6424. Time: 132.4060 us. Best GFLOPs: 19.2602
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #10: GFLOPs: 8.5248. Time: 211.8909 us. Best GFLOPs: 19.2602
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #11: GFLOPs: 13.2480. Time: 136.3481 us. Best GFLOPs: 19.2602
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #12: GFLOPs: 20.4397. Time: 88.3738 us. Best GFLOPs: 20.4397
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #13: GFLOPs: 4.6635. Time: 387.3357 us. Best GFLOPs: 20.4397
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #14: GFLOPs: 15.8515. Time: 113.9535 us. Best GFLOPs: 20.4397
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #15: GFLOPs: 19.2788. Time: 93.6952 us. Best GFLOPs: 20.4397
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #16: GFLOPs: 20.8994. Time: 86.4299 us. Best GFLOPs: 20.8994
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #17: GFLOPs: 18.8991. Time: 95.5780 us. Best GFLOPs: 20.8994
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:121] [Task #32: fused_nn_max_pool2d_4] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(30), T.int64(30), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4), T.int64(3)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1920)):
            for ax3 in range(T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_fused // T.int64(30))
                        v_ax2 = T.axis.spatial(T.int64(30), ax0_ax1_ax2_fused % T.int64(30))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(29) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(29), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(28), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_fused // T.int64(28))
                        v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_fused % T.int64(28))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_fused // T.int64(28))
                            v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_fused % T.int64(28))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(28), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_fused // T.int64(28))
                    v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_fused % T.int64(28))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(3), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_fused // T.int64(28))
                        v_ax2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_fused % T.int64(28))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26 = sch.get_loops(block=b19)
l27 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l27)
l28 = sch.fuse(l26, preserve_unit_iters=True)
sch.vectorize(loop=l28)
l29, l30, l31, l32, l33, l34, l35 = sch.get_loops(block=b20)
l36 = sch.fuse(l29, l30, l31, preserve_unit_iters=True)
sch.parallel(loop=l36)
l37 = sch.fuse(l35, preserve_unit_iters=True)
sch.vectorize(loop=l37)
sch.annotate(block_or_loop=l36, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l36, ann_key="pragma_unroll_explicit", ann_val=1)
l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b21)
l44 = sch.fuse(l38, l39, l40, preserve_unit_iters=True)
sch.parallel(loop=l44)
sch.annotate(block_or_loop=l44, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l44, ann_key="pragma_unroll_explicit", ann_val=1)
b45 = sch.get_block(name="pool_max_rf", func_name="main")
l46, l47, l48, l49, l50 = sch.get_loops(block=b45)
b51 = sch.decompose_reduction(block=b45, loop=l49)
b52 = sch.get_block(name="pool_max", func_name="main")
l53, l54, l55, l56 = sch.get_loops(block=b52)
b57 = sch.decompose_reduction(block=b52, loop=l56)
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #19: GFLOPs: 16.5090. Time: 109.4155 us. Best GFLOPs: 20.8994
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #20: GFLOPs: 24.9294. Time: 72.4580 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #21: GFLOPs: 13.8936. Time: 130.0119 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #22: GFLOPs: 18.7974. Time: 96.0950 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #23: GFLOPs: 17.0120. Time: 106.1804 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #24: GFLOPs: 12.0038. Time: 150.4808 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #25: GFLOPs: 11.0236. Time: 163.8615 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #26: GFLOPs: 7.7500. Time: 233.0757 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #27: GFLOPs: 9.4882. Time: 190.3768 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #28: GFLOPs: 10.7619. Time: 167.8456 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #29: GFLOPs: 15.4293. Time: 117.0719 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #30: GFLOPs: 21.6706. Time: 83.3544 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #31: GFLOPs: 8.2534. Time: 218.8588 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #32: GFLOPs: 6.5209. Time: 277.0063 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #33: GFLOPs: 18.3981. Time: 98.1807 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #34: GFLOPs: 13.8080. Time: 130.8180 us. Best GFLOPs: 24.9294
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #35: GFLOPs: 29.1886. Time: 61.8849 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #36: GFLOPs: 14.4562. Time: 124.9521 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #37: GFLOPs: 17.6341. Time: 102.4341 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #38: GFLOPs: 16.1618. Time: 111.7659 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #39: GFLOPs: 13.4054. Time: 134.7469 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #40: GFLOPs: 20.1455. Time: 89.6646 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #41: GFLOPs: 11.8824. Time: 152.0179 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #42: GFLOPs: 11.8340. Time: 152.6398 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #43: GFLOPs: 25.3829. Time: 71.1635 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #44: GFLOPs: 19.1510. Time: 94.3208 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #45: GFLOPs: 16.0524. Time: 112.5272 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #46: GFLOPs: 23.0938. Time: 78.2173 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #47: GFLOPs: 19.3707. Time: 93.2510 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #48: GFLOPs: 6.8988. Time: 261.8320 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #49: GFLOPs: 23.1726. Time: 77.9514 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #50: GFLOPs: 12.9512. Time: 139.4723 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #51: GFLOPs: 9.5067. Time: 190.0072 us. Best GFLOPs: 29.1886
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #52: GFLOPs: 32.4453. Time: 55.6732 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #53: GFLOPs: 10.0724. Time: 179.3360 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #54: GFLOPs: 18.4848. Time: 97.7200 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #55: GFLOPs: 17.2452. Time: 104.7441 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #56: GFLOPs: 18.0565. Time: 100.0381 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #57: GFLOPs: 14.6072. Time: 123.6608 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #58: GFLOPs: 13.4838. Time: 133.9630 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #59: GFLOPs: 16.1290. Time: 111.9928 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #60: GFLOPs: 16.6769. Time: 108.3136 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #61: GFLOPs: 4.8312. Time: 373.8889 us. Best GFLOPs: 32.4453
2024-04-29 15:05:51 [INFO] [task_scheduler.cc:131] [Task #32: fused_nn_max_pool2d_4] Trial #62: GFLOPs: 13.9635. Time: 129.3615 us. Best GFLOPs: 32.4453
