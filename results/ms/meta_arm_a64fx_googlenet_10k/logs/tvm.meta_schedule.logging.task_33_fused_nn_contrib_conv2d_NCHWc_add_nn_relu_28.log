2024-04-29 13:20:55 [INFO] [task_scheduler.cc:160] Initializing Task #33: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28"
2024-04-29 13:20:55 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:20:55 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:20:55 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:20:55 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:20:55 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:16:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:16:53 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:16:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 14:16:56 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:16:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 14:17:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 14:17:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 14:17:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 14:17:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9983  0.9978  0.9959  0.9953  0.9941  0.9941  0.9937  0.9935  0.9933  0.9918  0.9914  0.9912  0.9909  0.9908  0.9903
[17 : 32]:	0.9903  0.9900  0.9900  0.9899  0.9898  0.9894  0.9891  0.9890  0.9884  0.9883  0.9883  0.9876  0.9874  0.9872  0.9864  0.9864
[33 : 48]:	0.9861  0.9860  0.9859  0.9838  0.9833  0.9833  0.9822  0.9815  0.9808  0.9803  0.9786  0.9784  0.9776  0.9771  0.9767  0.9766
[49 : 64]:	0.9760  0.9755  0.9750  0.9749  0.9742  0.9737  0.9735  0.9730  0.9729  0.9725  0.9719  0.9716  0.9716  0.9709  0.9708  0.9703
2024-04-29 14:17:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:17:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:121] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(2), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(28) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(28) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[256, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #2: GFLOPs: 59.3870. Time: 434.2781 us. Best GFLOPs: 59.3870
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #3: GFLOPs: 2.8989. Time: 8896.7479 us. Best GFLOPs: 59.3870
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #4: GFLOPs: 63.9249. Time: 403.4497 us. Best GFLOPs: 63.9249
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #5: GFLOPs: 89.2509. Time: 288.9658 us. Best GFLOPs: 89.2509
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #6: GFLOPs: 37.6055. Time: 685.8165 us. Best GFLOPs: 89.2509
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #7: GFLOPs: 106.0316. Time: 243.2338 us. Best GFLOPs: 106.0316
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #8: GFLOPs: 88.9198. Time: 290.0418 us. Best GFLOPs: 106.0316
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #9: GFLOPs: 136.7034. Time: 188.6600 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #10: GFLOPs: 56.4937. Time: 456.5192 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #11: GFLOPs: 0.8182. Time: 31519.5935 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #12: GFLOPs: 33.9401. Time: 759.8813 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #13: GFLOPs: 47.2824. Time: 545.4558 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #14: GFLOPs: 5.7769. Time: 4464.3738 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #15: GFLOPs: 13.7522. Time: 1875.3716 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #16: GFLOPs: 54.0776. Time: 476.9163 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #17: GFLOPs: 86.6002. Time: 297.8107 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #18: GFLOPs: 115.8528. Time: 222.6141 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #19: GFLOPs: 55.0839. Time: 468.2033 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #20: GFLOPs: 18.9657. Time: 1359.8463 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #21: GFLOPs: 46.8987. Time: 549.9186 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #22: GFLOPs: 2.1398. Time: 12052.6774 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #23: GFLOPs: 6.6493. Time: 3878.6875 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #24: GFLOPs: 28.9445. Time: 891.0328 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #25: GFLOPs: 55.3843. Time: 465.6637 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #26: GFLOPs: 39.0948. Time: 659.6903 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #27: GFLOPs: 54.0144. Time: 477.4742 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #28: GFLOPs: 98.3014. Time: 262.3611 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #29: GFLOPs: 24.8243. Time: 1038.9186 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #30: GFLOPs: 4.0529. Time: 6363.4717 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #31: GFLOPs: 1.5249. Time: 16912.8390 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #32: GFLOPs: 48.6412. Time: 530.2190 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #33: GFLOPs: 40.7399. Time: 633.0518 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:121] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(2), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #35: GFLOPs: 102.8279. Time: 250.8119 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #36: GFLOPs: 89.4932. Time: 288.1835 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #37: GFLOPs: 10.0676. Time: 2561.7379 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #38: GFLOPs: 71.4467. Time: 360.9751 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #39: GFLOPs: 114.0557. Time: 226.1216 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #40: GFLOPs: 87.6509. Time: 294.2407 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #41: GFLOPs: 2.4498. Time: 10527.5823 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #42: GFLOPs: 68.9997. Time: 373.7767 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #43: GFLOPs: 62.4599. Time: 412.9123 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #44: GFLOPs: 105.7002. Time: 243.9964 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #45: GFLOPs: 29.5262. Time: 873.4766 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #46: GFLOPs: 18.2199. Time: 1415.5133 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #47: GFLOPs: 62.2361. Time: 414.3975 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #48: GFLOPs: 22.9432. Time: 1124.1010 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #49: GFLOPs: 29.8806. Time: 863.1181 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #50: GFLOPs: 71.9152. Time: 358.6233 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #51: GFLOPs: 39.5328. Time: 652.3807 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #52: GFLOPs: 29.7795. Time: 866.0464 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #53: GFLOPs: 23.4034. Time: 1101.9943 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #54: GFLOPs: 46.4138. Time: 555.6640 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #55: GFLOPs: 0.4231. Time: 60953.0707 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #56: GFLOPs: 28.5018. Time: 904.8710 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #57: GFLOPs: 22.5344. Time: 1144.4908 us. Best GFLOPs: 136.7034
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #58: GFLOPs: 137.4779. Time: 187.5971 us. Best GFLOPs: 137.4779
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #59: GFLOPs: 38.4476. Time: 670.7954 us. Best GFLOPs: 137.4779
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #60: GFLOPs: 48.5282. Time: 531.4530 us. Best GFLOPs: 137.4779
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #61: GFLOPs: 93.4376. Time: 276.0180 us. Best GFLOPs: 137.4779
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #62: GFLOPs: 92.2522. Time: 279.5647 us. Best GFLOPs: 137.4779
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #63: GFLOPs: 84.6977. Time: 304.5000 us. Best GFLOPs: 137.4779
2024-04-29 15:05:56 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #64: GFLOPs: 92.3551. Time: 279.2532 us. Best GFLOPs: 137.4779
2024-04-29 16:16:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:16:58 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 16:17:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 16:17:00 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 16:17:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 16:17:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 16:17:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 16:17:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x655ccf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5cec528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x68d5498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5abf3b8)]: 0 failure(s)
2024-04-29 16:17:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9962  0.9427  0.9166  0.9094  0.9089  0.9074  0.8899  0.8883  0.8847  0.8667  0.8627  0.8496  0.8488  0.8470  0.8428  0.8428
[17 : 32]:	0.8424  0.8393  0.8362  0.8266  0.8254  0.8253  0.8237  0.8223  0.8172  0.8153  0.8133  0.8133  0.8128  0.8098  0.8049  0.8037
[33 : 48]:	0.7972  0.7950  0.7911  0.7876  0.7857  0.7831  0.7812  0.7760  0.7649  0.7582  0.7560  0.7537  0.7519  0.7488  0.7480  0.7465
[49 : 64]:	0.7460  0.7415  0.7413  0.7380  0.7370  0.7346  0.7337  0.7336  0.7328  0.7324  0.7324  0.7321  0.7307  0.7285  0.7274  0.7272
2024-04-29 16:17:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 16:17:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #65: GFLOPs: 150.1133. Time: 171.8066 us. Best GFLOPs: 150.1133
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #66: GFLOPs: 171.8254. Time: 150.0969 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #67: GFLOPs: 102.4740. Time: 251.6782 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #68: GFLOPs: 114.9672. Time: 224.3288 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #69: GFLOPs: 118.6557. Time: 217.3555 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #70: GFLOPs: 127.6265. Time: 202.0776 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #71: GFLOPs: 149.0694. Time: 173.0098 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #72: GFLOPs: 122.2837. Time: 210.9068 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #73: GFLOPs: 128.7187. Time: 200.3630 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #74: GFLOPs: 74.3990. Time: 346.6506 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #75: GFLOPs: 87.2407. Time: 295.6242 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #76: GFLOPs: 170.2541. Time: 151.4821 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #77: GFLOPs: 149.2758. Time: 172.7705 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #78: GFLOPs: 130.2731. Time: 197.9723 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #79: GFLOPs: 91.6776. Time: 281.3171 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #80: GFLOPs: 100.0154. Time: 257.8649 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #81: GFLOPs: 142.6823. Time: 180.7545 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:121] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #82: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(392) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(392) // T.int64(98) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(98) // T.int64(14) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(392) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(392) // T.int64(98) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(98) // T.int64(14) * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b103)
b123 = sch.decompose_reduction(block=b103, loop=l107)
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #83: GFLOPs: 140.5717. Time: 183.4684 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #84: GFLOPs: 130.8945. Time: 197.0325 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #85: GFLOPs: 59.8029. Time: 431.2575 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #86: GFLOPs: 115.2174. Time: 223.8418 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #87: GFLOPs: 133.1038. Time: 193.7620 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #88: GFLOPs: 113.0274. Time: 228.1789 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #89: GFLOPs: 91.3951. Time: 282.1864 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #90: GFLOPs: 119.8388. Time: 215.2097 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #91: GFLOPs: 130.0579. Time: 198.2999 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #92: GFLOPs: 113.5489. Time: 227.1310 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #93: GFLOPs: 132.1606. Time: 195.1448 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #94: GFLOPs: 67.5218. Time: 381.9575 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #95: GFLOPs: 170.2224. Time: 151.5104 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #96: GFLOPs: 152.8145. Time: 168.7697 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #97: GFLOPs: 118.8518. Time: 216.9969 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #98: GFLOPs: 126.2250. Time: 204.3214 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #99: GFLOPs: 120.6748. Time: 213.7188 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #100: GFLOPs: 94.4383. Time: 273.0933 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #101: GFLOPs: 86.9691. Time: 296.5473 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #102: GFLOPs: 95.0931. Time: 271.2127 us. Best GFLOPs: 171.8254
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #103: GFLOPs: 172.4265. Time: 149.5737 us. Best GFLOPs: 172.4265
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #104: GFLOPs: 188.0890. Time: 137.1184 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #105: GFLOPs: 129.9552. Time: 198.4566 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #106: GFLOPs: 181.5769. Time: 142.0360 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #107: GFLOPs: 86.0933. Time: 299.5642 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #108: GFLOPs: 87.7500. Time: 293.9084 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #109: GFLOPs: 62.5547. Time: 412.2865 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #110: GFLOPs: 155.9420. Time: 165.3849 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #111: GFLOPs: 154.6294. Time: 166.7889 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #112: GFLOPs: 130.2945. Time: 197.9398 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #113: GFLOPs: 116.6758. Time: 221.0438 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #114: GFLOPs: 140.9969. Time: 182.9152 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #115: GFLOPs: 47.7279. Time: 540.3640 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #116: GFLOPs: 101.0350. Time: 255.2626 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #117: GFLOPs: 42.3447. Time: 609.0607 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #118: GFLOPs: 166.6735. Time: 154.7364 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #119: GFLOPs: 155.2427. Time: 166.1300 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #120: GFLOPs: 155.1288. Time: 166.2520 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #121: GFLOPs: 118.1147. Time: 218.3510 us. Best GFLOPs: 188.0890
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #122: GFLOPs: 203.4534. Time: 126.7635 us. Best GFLOPs: 203.4534
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #123: GFLOPs: 113.5865. Time: 227.0557 us. Best GFLOPs: 203.4534
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #124: GFLOPs: 111.2177. Time: 231.8918 us. Best GFLOPs: 203.4534
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #125: GFLOPs: 119.5830. Time: 215.6700 us. Best GFLOPs: 203.4534
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #126: GFLOPs: 68.8806. Time: 374.4229 us. Best GFLOPs: 203.4534
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #127: GFLOPs: 90.6231. Time: 284.5904 us. Best GFLOPs: 203.4534
2024-04-29 16:19:01 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #128: GFLOPs: 78.0508. Time: 330.4317 us. Best GFLOPs: 203.4534
