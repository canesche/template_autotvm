2024-04-29 13:22:27 [INFO] [task_scheduler.cc:160] Initializing Task #57: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46"
2024-04-29 13:22:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(528), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:22:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:22:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(66), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[66, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:22:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(66), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[66, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:22:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(66), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[66, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:53:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:53:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:53:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 14:53:52 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:53:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 14:53:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 14:54:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 14:54:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 14:54:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9986  0.9985  0.9984  0.9982  0.9978  0.9974  0.9969  0.9967  0.9964  0.9959  0.9938  0.9924  0.9911  0.9908  0.9903
[17 : 32]:	0.9897  0.9892  0.9890  0.9883  0.9882  0.9879  0.9876  0.9868  0.9863  0.9855  0.9849  0.9846  0.9832  0.9823  0.9821  0.9811
[33 : 48]:	0.9811  0.9802  0.9797  0.9790  0.9783  0.9776  0.9775  0.9773  0.9762  0.9756  0.9754  0.9749  0.9742  0.9740  0.9736  0.9725
[49 : 64]:	0.9722  0.9722  0.9719  0.9719  0.9714  0.9712  0.9710  0.9709  0.9696  0.9685  0.9681  0.9681  0.9679  0.9663  0.9662  0.9661
2024-04-29 14:54:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:54:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #1: GFLOPs: 62.8299. Time: 844.9196 us. Best GFLOPs: 62.8299
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #2: GFLOPs: 89.9811. Time: 589.9707 us. Best GFLOPs: 89.9811
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #3: GFLOPs: 91.6689. Time: 579.1084 us. Best GFLOPs: 91.6689
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #4: GFLOPs: 17.1146. Time: 3101.8096 us. Best GFLOPs: 91.6689
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #5: GFLOPs: 106.1756. Time: 499.9850 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #6: GFLOPs: 76.5119. Time: 693.8298 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #7: GFLOPs: 6.5365. Time: 8121.4816 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #8: GFLOPs: 106.0801. Time: 500.4351 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #9: GFLOPs: 9.5158. Time: 5578.7468 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #10: GFLOPs: 4.9550. Time: 10713.6364 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #11: GFLOPs: 4.3470. Time: 12212.2053 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #12: GFLOPs: 33.6915. Time: 1575.6560 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #13: GFLOPs: 24.7113. Time: 2148.2526 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(33), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(32) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[33, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #15: GFLOPs: 66.9852. Time: 792.5070 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #16: GFLOPs: 1.3964. Time: 38017.0380 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #17: GFLOPs: 8.9889. Time: 5905.7614 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #18: GFLOPs: 73.2565. Time: 724.6621 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #19: GFLOPs: 42.7105. Time: 1242.9318 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #20: GFLOPs: 78.0194. Time: 680.4234 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #21: GFLOPs: 3.3464. Time: 15863.5129 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #22: GFLOPs: 13.7467. Time: 3861.7363 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #23: GFLOPs: 1.5865. Time: 33461.3462 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #24: GFLOPs: 62.6771. Time: 846.9796 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #25: GFLOPs: 36.2876. Time: 1462.9298 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #26: GFLOPs: 17.1691. Time: 3091.9584 us. Best GFLOPs: 106.1756
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #27: GFLOPs: 129.1762. Time: 410.9596 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #28: GFLOPs: 62.4745. Time: 849.7256 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #29: GFLOPs: 18.5706. Time: 2858.6085 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #30: GFLOPs: 6.4541. Time: 8225.2511 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #31: GFLOPs: 11.4311. Time: 4644.0135 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #32: GFLOPs: 61.0568. Time: 869.4568 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #33: GFLOPs: 7.8614. Time: 6752.7797 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #34: GFLOPs: 7.1066. Time: 7470.0357 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #35: GFLOPs: 47.1688. Time: 1125.4507 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #36: GFLOPs: 56.1611. Time: 945.2482 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #37: GFLOPs: 57.7266. Time: 919.6141 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #38: GFLOPs: 27.0012. Time: 1966.0659 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #39: GFLOPs: 30.5075. Time: 1740.1047 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #40: GFLOPs: 20.5381. Time: 2584.7624 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #41: GFLOPs: 46.4767. Time: 1142.2108 us. Best GFLOPs: 129.1762
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #42: GFLOPs: 143.7349. Time: 369.3341 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #43: GFLOPs: 31.2148. Time: 1700.6736 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #44: GFLOPs: 79.2284. Time: 670.0398 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #45: GFLOPs: 8.9768. Time: 5913.7259 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #46: GFLOPs: 56.5186. Time: 939.2696 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #47: GFLOPs: 64.6865. Time: 820.6694 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #48: GFLOPs: 28.7028. Time: 1849.5134 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #49: GFLOPs: 64.4225. Time: 824.0323 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #50: GFLOPs: 68.7290. Time: 772.3984 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #51: GFLOPs: 35.7453. Time: 1485.1236 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #52: GFLOPs: 104.6283. Time: 507.3789 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #53: GFLOPs: 99.0879. Time: 535.7484 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #54: GFLOPs: 87.5526. Time: 606.3354 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #55: GFLOPs: 4.3787. Time: 12123.6963 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #56: GFLOPs: 85.2033. Time: 623.0532 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #57: GFLOPs: 32.3504. Time: 1640.9770 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #58: GFLOPs: 40.7663. Time: 1302.2076 us. Best GFLOPs: 143.7349
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #59: GFLOPs: 159.3585. Time: 333.1244 us. Best GFLOPs: 159.3585
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #60: GFLOPs: 95.0233. Time: 558.6651 us. Best GFLOPs: 159.3585
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #61: GFLOPs: 30.9980. Time: 1712.5704 us. Best GFLOPs: 159.3585
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #62: GFLOPs: 81.6497. Time: 650.1702 us. Best GFLOPs: 159.3585
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #63: GFLOPs: 73.9706. Time: 717.6664 us. Best GFLOPs: 159.3585
2024-04-29 15:08:24 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #64: GFLOPs: 88.1129. Time: 602.4794 us. Best GFLOPs: 159.3585
2024-04-29 15:47:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 15:47:45 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 15:47:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 15:47:48 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-29 15:47:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 15:47:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 15:48:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 15:48:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 15:48:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9512  0.9453  0.9442  0.9366  0.9343  0.9337  0.9290  0.9189  0.9189  0.9185  0.9155  0.9136  0.9125  0.9113  0.9109  0.9087
[17 : 32]:	0.9069  0.9069  0.9069  0.9058  0.8973  0.8955  0.8902  0.8902  0.8784  0.8731  0.8714  0.8714  0.8714  0.8705  0.8675  0.8650
[33 : 48]:	0.8642  0.8493  0.8395  0.8395  0.8280  0.8280  0.8280  0.8242  0.8226  0.8054  0.7949  0.7884  0.7861  0.7836  0.7769  0.7749
[49 : 64]:	0.7638  0.7605  0.7581  0.7578  0.7548  0.7524  0.7508  0.7500  0.7499  0.7494  0.7473  0.7472  0.7450  0.7441  0.7421  0.7416
2024-04-29 15:48:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 15:48:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #65: GFLOPs: 82.7484. Time: 641.5377 us. Best GFLOPs: 159.3585
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #66: GFLOPs: 83.3767. Time: 636.7030 us. Best GFLOPs: 159.3585
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #67: GFLOPs: 120.6963. Time: 439.8331 us. Best GFLOPs: 159.3585
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #68: GFLOPs: 214.8536. Time: 247.0809 us. Best GFLOPs: 214.8536
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #69: GFLOPs: 133.7426. Time: 396.9281 us. Best GFLOPs: 214.8536
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #70: GFLOPs: 151.8219. Time: 349.6610 us. Best GFLOPs: 214.8536
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #71: GFLOPs: 171.5555. Time: 309.4404 us. Best GFLOPs: 214.8536
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #72: GFLOPs: 121.4567. Time: 437.0793 us. Best GFLOPs: 214.8536
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #73: GFLOPs: 123.3900. Time: 430.2311 us. Best GFLOPs: 214.8536
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #74: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(7) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(28) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(7) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[11, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #75: GFLOPs: 141.4685. Time: 375.2510 us. Best GFLOPs: 214.8536
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #76: GFLOPs: 216.5837. Time: 245.1072 us. Best GFLOPs: 216.5837
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #77: GFLOPs: 111.5476. Time: 475.9063 us. Best GFLOPs: 216.5837
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #78: GFLOPs: 142.0747. Time: 373.6498 us. Best GFLOPs: 216.5837
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #79: GFLOPs: 149.7971. Time: 354.3874 us. Best GFLOPs: 216.5837
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #80: GFLOPs: 114.0426. Time: 465.4947 us. Best GFLOPs: 216.5837
2024-04-29 15:49:39 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #81: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(49) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(196) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(49) // T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(49) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(196) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(49) // T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[11, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #82: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(14) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(14) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[11, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #83: GFLOPs: 130.0753. Time: 408.1191 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #84: GFLOPs: 143.7834. Time: 369.2097 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #85: GFLOPs: 163.9420. Time: 323.8109 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #86: GFLOPs: 83.6388. Time: 634.7079 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #87: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(7) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(28) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(392) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(28) // T.int64(7) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(28) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[11, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #88: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(56) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(64), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(32) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(7) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(56) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[11, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #89: GFLOPs: 122.5730. Time: 433.0987 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #90: GFLOPs: 132.5690. Time: 400.4421 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #91: GFLOPs: 119.6100. Time: 443.8276 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #92: GFLOPs: 123.0694. Time: 431.3518 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #93: GFLOPs: 119.7376. Time: 443.3544 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #94: GFLOPs: 142.8284. Time: 371.6782 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #95: GFLOPs: 144.1646. Time: 368.2334 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #96: GFLOPs: 55.8299. Time: 950.8559 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #97: GFLOPs: 143.6908. Time: 369.4476 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #98: GFLOPs: 146.4079. Time: 362.5912 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #99: GFLOPs: 174.8269. Time: 303.6501 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #100: GFLOPs: 149.4237. Time: 355.2729 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #101: GFLOPs: 140.2347. Time: 378.5525 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #102: GFLOPs: 118.5522. Time: 447.7877 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #103: GFLOPs: 136.1822. Time: 389.8174 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #104: GFLOPs: 128.2737. Time: 413.8510 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #105: GFLOPs: 133.0755. Time: 398.9180 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #106: GFLOPs: 148.6032. Time: 357.2347 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #107: GFLOPs: 151.0599. Time: 351.4248 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #108: GFLOPs: 146.0193. Time: 363.5561 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #109: GFLOPs: 140.9213. Time: 376.7082 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #110: GFLOPs: 111.6792. Time: 475.3456 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #111: GFLOPs: 123.4244. Time: 430.1112 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #112: GFLOPs: 87.1415. Time: 609.1952 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #113: GFLOPs: 49.2094. Time: 1078.7818 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #114: GFLOPs: 139.3168. Time: 381.0467 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #115: GFLOPs: 134.6527. Time: 394.2455 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #116: GFLOPs: 115.8343. Time: 458.2942 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #117: GFLOPs: 93.9324. Time: 565.1532 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #118: GFLOPs: 48.3988. Time: 1096.8498 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #119: GFLOPs: 159.2653. Time: 333.3195 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #120: GFLOPs: 60.5038. Time: 877.4027 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #121: GFLOPs: 164.3862. Time: 322.9360 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #122: GFLOPs: 151.2789. Time: 350.9161 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #123: GFLOPs: 123.7167. Time: 429.0951 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #124: GFLOPs: 120.5931. Time: 440.2095 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #125: GFLOPs: 35.1023. Time: 1512.3292 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #126: GFLOPs: 100.8494. Time: 526.3910 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #127: GFLOPs: 130.2828. Time: 407.4689 us. Best GFLOPs: 216.5837
2024-04-29 15:49:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #128: GFLOPs: 86.6415. Time: 612.7113 us. Best GFLOPs: 216.5837
2024-04-29 17:02:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:02:05 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 17:02:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 17:02:07 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 17:02:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 17:02:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 17:02:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 17:02:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 17:02:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8766  0.8320  0.8320  0.8320  0.8193  0.8040  0.7977  0.7975  0.7862  0.7814  0.7767  0.7683  0.7683  0.7670  0.7647  0.7647
[17 : 32]:	0.7548  0.7474  0.7452  0.7452  0.7387  0.7387  0.7378  0.7371  0.7365  0.7355  0.7348  0.7276  0.7274  0.7247  0.7230  0.7172
[33 : 48]:	0.7168  0.7103  0.7101  0.7092  0.7084  0.7084  0.7067  0.6986  0.6960  0.6936  0.6936  0.6931  0.6930  0.6881  0.6881  0.6861
[49 : 64]:	0.6857  0.6856  0.6824  0.6809  0.6798  0.6787  0.6787  0.6774  0.6774  0.6769  0.6755  0.6754  0.6752  0.6751  0.6749  0.6749
2024-04-29 17:02:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:02:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #129: GFLOPs: 197.5624. Time: 268.7060 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #130: GFLOPs: 170.2091. Time: 311.8882 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #131: GFLOPs: 164.7746. Time: 322.1746 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #132: GFLOPs: 159.6323. Time: 332.5531 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #133: GFLOPs: 126.1430. Time: 420.8414 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #134: GFLOPs: 193.7067. Time: 274.0546 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #135: GFLOPs: 169.2340. Time: 313.6853 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #136: GFLOPs: 152.4828. Time: 348.1455 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #137: GFLOPs: 154.1720. Time: 344.3310 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #138: GFLOPs: 135.3676. Time: 392.1632 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #139: GFLOPs: 137.3622. Time: 386.4688 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #140: GFLOPs: 154.2501. Time: 344.1567 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #141: GFLOPs: 200.6050. Time: 264.6305 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #142: GFLOPs: 176.4609. Time: 300.8383 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #143: GFLOPs: 156.4508. Time: 339.3156 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #144: GFLOPs: 190.8938. Time: 278.0929 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #145: GFLOPs: 142.0655. Time: 373.6741 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #146: GFLOPs: 57.0534. Time: 930.4661 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #147: GFLOPs: 100.6439. Time: 527.4658 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #148: GFLOPs: 101.3498. Time: 523.7918 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #149: GFLOPs: 147.1762. Time: 360.6983 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #150: GFLOPs: 146.5700. Time: 362.1902 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #151: GFLOPs: 156.0356. Time: 340.2185 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #152: GFLOPs: 141.8048. Time: 374.3611 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #153: GFLOPs: 132.9417. Time: 399.3194 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #154: GFLOPs: 160.5575. Time: 330.6367 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #155: GFLOPs: 162.3809. Time: 326.9239 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #156: GFLOPs: 119.4983. Time: 444.2422 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #157: GFLOPs: 123.3305. Time: 430.4385 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #158: GFLOPs: 93.7561. Time: 566.2162 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #159: GFLOPs: 162.0875. Time: 327.5158 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #160: GFLOPs: 146.9270. Time: 361.3101 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #161: GFLOPs: 78.1207. Time: 679.5411 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #162: GFLOPs: 129.3832. Time: 410.3020 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #163: GFLOPs: 161.1316. Time: 329.4587 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #164: GFLOPs: 174.6068. Time: 304.0329 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #165: GFLOPs: 135.7816. Time: 390.9677 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #166: GFLOPs: 95.1062. Time: 558.1779 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #167: GFLOPs: 142.7576. Time: 371.8626 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #168: GFLOPs: 142.7800. Time: 371.8041 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #169: GFLOPs: 88.9543. Time: 596.7805 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #170: GFLOPs: 165.0603. Time: 321.6171 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #171: GFLOPs: 149.6611. Time: 354.7094 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #172: GFLOPs: 179.3960. Time: 295.9164 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #173: GFLOPs: 132.1522. Time: 401.7051 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #174: GFLOPs: 153.5775. Time: 345.6639 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #175: GFLOPs: 140.9798. Time: 376.5518 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #176: GFLOPs: 146.8872. Time: 361.4080 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #177: GFLOPs: 173.1745. Time: 306.5474 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #178: GFLOPs: 143.0005. Time: 371.2309 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #179: GFLOPs: 44.7870. Time: 1185.3040 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #180: GFLOPs: 167.5109. Time: 316.9120 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #181: GFLOPs: 129.7060. Time: 409.2811 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #182: GFLOPs: 127.4253. Time: 416.6066 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #183: GFLOPs: 164.1810. Time: 323.3395 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #184: GFLOPs: 146.6811. Time: 361.9158 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #185: GFLOPs: 167.8270. Time: 316.3151 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #186: GFLOPs: 144.8956. Time: 366.3755 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #187: GFLOPs: 88.4524. Time: 600.1669 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #188: GFLOPs: 119.1206. Time: 445.6509 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #189: GFLOPs: 120.3147. Time: 441.2281 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #190: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(64), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(64) + oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(32) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(264), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(64), oc_chunk_0 * T.int64(64) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(32) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(2) + ic_1)
                                v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(64), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 32])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[264, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b67)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b106)
b133 = sch.decompose_reduction(block=b106, loop=l117)
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #191: GFLOPs: 104.0208. Time: 510.3424 us. Best GFLOPs: 216.5837
2024-04-29 17:04:11 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #192: GFLOPs: 51.6415. Time: 1027.9749 us. Best GFLOPs: 216.5837
2024-04-29 18:08:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:08:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 18:08:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 18:08:43 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 18:08:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 18:08:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 18:08:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 18:09:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7516538)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30dfbe8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x57afb18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x752b9f8)]: 0 failure(s)
2024-04-29 18:09:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9481  0.9440  0.9331  0.9331  0.9116  0.9037  0.9009  0.8381  0.8348  0.8341  0.8295  0.8199  0.8119  0.8109  0.8105  0.8101
[17 : 32]:	0.8048  0.8033  0.7994  0.7987  0.7912  0.7855  0.7855  0.7845  0.7727  0.7708  0.7665  0.7649  0.7624  0.7593  0.7571  0.7570
[33 : 48]:	0.7559  0.7556  0.7525  0.7525  0.7517  0.7511  0.7502  0.7487  0.7475  0.7429  0.7406  0.7390  0.7388  0.7383  0.7379  0.7362
[49 : 64]:	0.7361  0.7341  0.7335  0.7309  0.7299  0.7282  0.7240  0.7235  0.7221  0.7221  0.7187  0.7174  0.7171  0.7150  0.7150  0.7148
2024-04-29 18:09:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:09:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #193: GFLOPs: 109.1389. Time: 486.4095 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #194: GFLOPs: 76.6447. Time: 692.6274 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #195: GFLOPs: 150.8624. Time: 351.8849 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #196: GFLOPs: 164.1901. Time: 323.3217 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #197: GFLOPs: 160.0033. Time: 331.7820 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #198: GFLOPs: 201.5913. Time: 263.3358 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #199: GFLOPs: 168.4661. Time: 315.1151 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #200: GFLOPs: 144.3684. Time: 367.7135 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #201: GFLOPs: 170.3970. Time: 311.5443 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #202: GFLOPs: 161.7082. Time: 328.2840 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #203: GFLOPs: 170.5229. Time: 311.3142 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #204: GFLOPs: 154.6175. Time: 343.3390 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #205: GFLOPs: 161.7658. Time: 328.1671 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #206: GFLOPs: 90.1177. Time: 589.0763 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #207: GFLOPs: 164.9690. Time: 321.7951 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #208: GFLOPs: 159.5594. Time: 332.7050 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #209: GFLOPs: 154.5607. Time: 343.4652 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #210: GFLOPs: 108.1136. Time: 491.0225 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #211: GFLOPs: 197.7268. Time: 268.4826 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #212: GFLOPs: 162.1670. Time: 327.3552 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #213: GFLOPs: 196.1682. Time: 270.6158 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #214: GFLOPs: 206.3004. Time: 257.3248 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #215: GFLOPs: 156.2713. Time: 339.7054 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #216: GFLOPs: 207.5039. Time: 255.8323 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #217: GFLOPs: 148.9328. Time: 356.4440 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #218: GFLOPs: 152.3058. Time: 348.5502 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #219: GFLOPs: 136.7239. Time: 388.2731 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #220: GFLOPs: 161.5768. Time: 328.5509 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #221: GFLOPs: 164.9219. Time: 321.8870 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #222: GFLOPs: 139.2438. Time: 381.2465 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #223: GFLOPs: 196.8561. Time: 269.6702 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #224: GFLOPs: 148.8638. Time: 356.6091 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #225: GFLOPs: 154.5092. Time: 343.5795 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #226: GFLOPs: 86.1326. Time: 616.3312 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #227: GFLOPs: 199.5024. Time: 266.0931 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #228: GFLOPs: 150.9192. Time: 351.7525 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #229: GFLOPs: 167.2496. Time: 317.4070 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #230: GFLOPs: 166.3507. Time: 319.1223 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #231: GFLOPs: 149.0140. Time: 356.2499 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #232: GFLOPs: 80.4460. Time: 659.8990 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #233: GFLOPs: 78.9456. Time: 672.4401 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #234: GFLOPs: 99.4011. Time: 534.0604 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #235: GFLOPs: 71.4398. Time: 743.0896 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #236: GFLOPs: 69.6870. Time: 761.7802 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #237: GFLOPs: 159.0296. Time: 333.8134 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #238: GFLOPs: 60.5870. Time: 876.1978 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #239: GFLOPs: 99.1025. Time: 535.6696 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #240: GFLOPs: 172.0487. Time: 308.5534 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #241: GFLOPs: 84.2243. Time: 630.2959 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #242: GFLOPs: 172.4257. Time: 307.8787 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #243: GFLOPs: 191.2431. Time: 277.5850 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #244: GFLOPs: 89.6680. Time: 592.0310 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #245: GFLOPs: 150.5303. Time: 352.6614 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #246: GFLOPs: 202.9036. Time: 261.6327 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #247: GFLOPs: 116.6309. Time: 455.1643 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #248: GFLOPs: 159.2083. Time: 333.4388 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #249: GFLOPs: 144.1256. Time: 368.3330 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #250: GFLOPs: 150.4467. Time: 352.8573 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #251: GFLOPs: 205.7082. Time: 258.0655 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #252: GFLOPs: 148.6836. Time: 357.0416 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #253: GFLOPs: 136.7816. Time: 388.1093 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #254: GFLOPs: 43.9795. Time: 1207.0679 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #255: GFLOPs: 29.7889. Time: 1782.0830 us. Best GFLOPs: 216.5837
2024-04-29 18:10:40 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #256: GFLOPs: 86.4374. Time: 614.1579 us. Best GFLOPs: 216.5837
