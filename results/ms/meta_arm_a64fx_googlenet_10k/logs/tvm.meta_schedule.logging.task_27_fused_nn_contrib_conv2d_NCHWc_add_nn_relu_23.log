2024-04-29 13:20:30 [INFO] [task_scheduler.cc:160] Initializing Task #27: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23"
2024-04-29 13:20:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4), T.int64(480), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 13:20:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:20:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(10) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 10])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 13:20:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(10) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 10])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 13:20:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(10) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 10])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 14:06:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:06:26 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:06:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 14:06:29 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:06:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 14:06:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 14:06:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 14:06:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 14:06:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9992  0.9969  0.9965  0.9962  0.9961  0.9957  0.9948  0.9942  0.9941  0.9936  0.9935  0.9932  0.9918  0.9915
[17 : 32]:	0.9912  0.9911  0.9900  0.9898  0.9897  0.9887  0.9884  0.9875  0.9874  0.9863  0.9858  0.9857  0.9854  0.9852  0.9846  0.9841
[33 : 48]:	0.9840  0.9840  0.9808  0.9791  0.9788  0.9787  0.9785  0.9776  0.9771  0.9770  0.9767  0.9763  0.9757  0.9757  0.9751  0.9751
[49 : 64]:	0.9749  0.9749  0.9733  0.9731  0.9724  0.9722  0.9721  0.9719  0.9718  0.9714  0.9711  0.9709  0.9709  0.9697  0.9679  0.9675
2024-04-29 14:06:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:06:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #1: GFLOPs: 1.0306. Time: 11709.5206 us. Best GFLOPs: 1.0306
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #2: GFLOPs: 12.2392. Time: 985.9536 us. Best GFLOPs: 12.2392
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #3: GFLOPs: 69.9689. Time: 172.4669 us. Best GFLOPs: 69.9689
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #4: GFLOPs: 52.9113. Time: 228.0669 us. Best GFLOPs: 69.9689
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #5: GFLOPs: 0.1994. Time: 60530.4653 us. Best GFLOPs: 69.9689
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #6: GFLOPs: 96.9937. Time: 124.4136 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #7: GFLOPs: 42.6801. Time: 282.7390 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #8: GFLOPs: 6.5050. Time: 1855.0789 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #9: GFLOPs: 13.0330. Time: 925.9040 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #10: GFLOPs: 90.1112. Time: 133.9160 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #11: GFLOPs: 0.2334. Time: 51707.1227 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #12: GFLOPs: 90.2277. Time: 133.7431 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #13: GFLOPs: 48.9157. Time: 246.6963 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #14: GFLOPs: 13.4028. Time: 900.3593 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #15: GFLOPs: 27.2473. Time: 442.8811 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #16: GFLOPs: 5.8104. Time: 2076.8656 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #17: GFLOPs: 73.6902. Time: 163.7576 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #18: GFLOPs: 23.0360. Time: 523.8464 us. Best GFLOPs: 96.9937
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #19: GFLOPs: 104.4667. Time: 115.5137 us. Best GFLOPs: 104.4667
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #20: GFLOPs: 9.5115. Time: 1268.7077 us. Best GFLOPs: 104.4667
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #21: GFLOPs: 20.1854. Time: 597.8241 us. Best GFLOPs: 104.4667
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #22: GFLOPs: 118.1389. Time: 102.1453 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #23: GFLOPs: 18.9725. Time: 636.0444 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #24: GFLOPs: 3.1929. Time: 3779.4113 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #25: GFLOPs: 8.4289. Time: 1431.6532 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #26: GFLOPs: 0.6167. Time: 19566.9458 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #27: GFLOPs: 86.9488. Time: 138.7866 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #28: GFLOPs: 28.3962. Time: 424.9629 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #29: GFLOPs: 44.0410. Time: 274.0024 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #30: GFLOPs: 98.5079. Time: 122.5012 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #31: GFLOPs: 20.6964. Time: 583.0651 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(480), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[480, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #33: GFLOPs: 6.3421. Time: 1902.7408 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #34: GFLOPs: 6.4272. Time: 1877.5374 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #35: GFLOPs: 28.1269. Time: 429.0313 us. Best GFLOPs: 118.1389
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #36: GFLOPs: 118.4029. Time: 101.9175 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #37: GFLOPs: 5.8239. Time: 2072.0382 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #38: GFLOPs: 16.5916. Time: 727.3153 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #39: GFLOPs: 30.4612. Time: 396.1542 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #40: GFLOPs: 13.0757. Time: 922.8795 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #41: GFLOPs: 34.4984. Time: 349.7941 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #42: GFLOPs: 22.6024. Time: 533.8962 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #43: GFLOPs: 53.1005. Time: 227.2543 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #44: GFLOPs: 35.1661. Time: 343.1524 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #45: GFLOPs: 23.2804. Time: 518.3481 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #46: GFLOPs: 1.2752. Time: 9462.7351 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #47: GFLOPs: 2.8288. Time: 4265.8626 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #48: GFLOPs: 34.6329. Time: 348.4355 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #49: GFLOPs: 3.0929. Time: 3901.6479 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #50: GFLOPs: 57.6418. Time: 209.3502 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #51: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(4), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[80, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b67)
l109 = sch.fuse(l107, l108, preserve_unit_iters=True)
sch.vectorize(loop=l109)
b110 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b110)
b137 = sch.decompose_reduction(block=b110, loop=l121)
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #52: GFLOPs: 47.4323. Time: 254.4118 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #53: GFLOPs: 18.4251. Time: 654.9398 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #54: GFLOPs: 40.0975. Time: 300.9497 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(16), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(30), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[30, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #56: GFLOPs: 9.0276. Time: 1336.7206 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #57: GFLOPs: 117.2493. Time: 102.9203 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #58: GFLOPs: 41.1254. Time: 293.4273 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #59: GFLOPs: 2.1482. Time: 5617.3868 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #60: GFLOPs: 29.9070. Time: 403.4952 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #61: GFLOPs: 25.9860. Time: 464.3778 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #62: GFLOPs: 75.2702. Time: 160.3202 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #63: GFLOPs: 56.5932. Time: 213.2291 us. Best GFLOPs: 118.4029
2024-04-29 15:05:26 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #64: GFLOPs: 50.7906. Time: 237.5899 us. Best GFLOPs: 118.4029
2024-04-29 17:29:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:29:04 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 17:29:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 17:29:06 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 17:29:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 17:29:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 17:29:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 17:29:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6e2ae28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4e68b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x69b6278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5a54db8)]: 0 failure(s)
2024-04-29 17:29:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9553  0.9463  0.9043  0.8862  0.8848  0.8554  0.8536  0.8409  0.8349  0.8332  0.8276  0.8042  0.7934  0.7917  0.7865  0.7852
[17 : 32]:	0.7849  0.7843  0.7827  0.7796  0.7782  0.7754  0.7719  0.7683  0.7672  0.7633  0.7555  0.7538  0.7504  0.7492  0.7475  0.7459
[33 : 48]:	0.7458  0.7414  0.7395  0.7354  0.7354  0.7344  0.7340  0.7339  0.7336  0.7329  0.7328  0.7306  0.7303  0.7291  0.7283  0.7248
[49 : 64]:	0.7239  0.7229  0.7218  0.7209  0.7169  0.7152  0.7142  0.7142  0.7132  0.7130  0.7130  0.7130  0.7130  0.7126  0.7118  0.7108
2024-04-29 17:29:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:29:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #65: GFLOPs: 4.7577. Time: 2536.3754 us. Best GFLOPs: 118.4029
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #66: GFLOPs: 75.5308. Time: 159.7670 us. Best GFLOPs: 118.4029
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #67: GFLOPs: 2.8976. Time: 4164.6149 us. Best GFLOPs: 118.4029
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #68: GFLOPs: 3.1728. Time: 3803.3902 us. Best GFLOPs: 118.4029
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #69: GFLOPs: 84.5452. Time: 142.7322 us. Best GFLOPs: 118.4029
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #70: GFLOPs: 109.8240. Time: 109.8788 us. Best GFLOPs: 118.4029
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #71: GFLOPs: 72.7865. Time: 165.7908 us. Best GFLOPs: 118.4029
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #72: GFLOPs: 96.9290. Time: 124.4966 us. Best GFLOPs: 118.4029
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #73: GFLOPs: 25.0532. Time: 481.6685 us. Best GFLOPs: 118.4029
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #74: GFLOPs: 120.2769. Time: 100.3296 us. Best GFLOPs: 120.2769
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #75: GFLOPs: 122.7300. Time: 98.3242 us. Best GFLOPs: 122.7300
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #76: GFLOPs: 140.2839. Time: 86.0208 us. Best GFLOPs: 140.2839
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #77: GFLOPs: 100.6823. Time: 119.8555 us. Best GFLOPs: 140.2839
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #78: GFLOPs: 98.0161. Time: 123.1158 us. Best GFLOPs: 140.2839
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #79: GFLOPs: 142.6460. Time: 84.5963 us. Best GFLOPs: 142.6460
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #80: GFLOPs: 80.5309. Time: 149.8473 us. Best GFLOPs: 142.6460
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #81: GFLOPs: 72.1366. Time: 167.2843 us. Best GFLOPs: 142.6460
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #82: GFLOPs: 116.1610. Time: 103.8845 us. Best GFLOPs: 142.6460
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #83: GFLOPs: 75.9272. Time: 158.9328 us. Best GFLOPs: 142.6460
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #84: GFLOPs: 54.3532. Time: 222.0168 us. Best GFLOPs: 142.6460
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #85: GFLOPs: 48.6254. Time: 248.1692 us. Best GFLOPs: 142.6460
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #86: GFLOPs: 50.0261. Time: 241.2208 us. Best GFLOPs: 142.6460
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #87: GFLOPs: 99.6122. Time: 121.1431 us. Best GFLOPs: 142.6460
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #88: GFLOPs: 151.1690. Time: 79.8267 us. Best GFLOPs: 151.1690
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #89: GFLOPs: 185.2985. Time: 65.1237 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #90: GFLOPs: 103.2497. Time: 116.8751 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #91: GFLOPs: 121.1654. Time: 99.5938 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #92: GFLOPs: 93.3939. Time: 129.2089 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #93: GFLOPs: 174.7680. Time: 69.0477 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #94: GFLOPs: 84.6419. Time: 142.5692 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #95: GFLOPs: 138.2425. Time: 87.2910 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #96: GFLOPs: 113.5703. Time: 106.2542 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #97: GFLOPs: 106.3228. Time: 113.4970 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #98: GFLOPs: 61.0538. Time: 197.6508 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #99: GFLOPs: 61.0466. Time: 197.6742 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #100: GFLOPs: 176.9644. Time: 68.1907 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #101: GFLOPs: 128.6466. Time: 93.8021 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #102: GFLOPs: 81.7892. Time: 147.5418 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #103: GFLOPs: 141.2553. Time: 85.4292 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #104: GFLOPs: 66.5871. Time: 181.2263 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #105: GFLOPs: 53.4020. Time: 225.9716 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #106: GFLOPs: 129.5235. Time: 93.1671 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #107: GFLOPs: 86.7228. Time: 139.1483 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #108: GFLOPs: 142.5734. Time: 84.6394 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #109: GFLOPs: 95.5900. Time: 126.2405 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #110: GFLOPs: 63.8659. Time: 188.9479 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #111: GFLOPs: 148.7988. Time: 81.0983 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #112: GFLOPs: 81.4449. Time: 148.1656 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #113: GFLOPs: 4.5847. Time: 2632.0936 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #114: GFLOPs: 107.1071. Time: 112.6660 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #115: GFLOPs: 53.5763. Time: 225.2365 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #116: GFLOPs: 132.4044. Time: 91.1399 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #117: GFLOPs: 104.6790. Time: 115.2794 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #118: GFLOPs: 137.5002. Time: 87.7623 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #119: GFLOPs: 90.8009. Time: 132.8988 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #120: GFLOPs: 105.1293. Time: 114.7856 us. Best GFLOPs: 185.2985
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #121: GFLOPs: 209.0053. Time: 57.7370 us. Best GFLOPs: 209.0053
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #122: GFLOPs: 96.2834. Time: 125.3313 us. Best GFLOPs: 209.0053
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #123: GFLOPs: 115.2000. Time: 104.7511 us. Best GFLOPs: 209.0053
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #124: GFLOPs: 98.9872. Time: 121.9080 us. Best GFLOPs: 209.0053
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #125: GFLOPs: 112.9934. Time: 106.7968 us. Best GFLOPs: 209.0053
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #126: GFLOPs: 49.8356. Time: 242.1426 us. Best GFLOPs: 209.0053
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #127: GFLOPs: 46.6658. Time: 258.5901 us. Best GFLOPs: 209.0053
2024-04-29 17:30:51 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_23] Trial #128: GFLOPs: 7.4703. Time: 1615.3808 us. Best GFLOPs: 209.0053
