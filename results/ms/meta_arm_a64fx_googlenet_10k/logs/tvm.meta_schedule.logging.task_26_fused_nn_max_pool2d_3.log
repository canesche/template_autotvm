2024-04-29 13:20:27 [INFO] [task_scheduler.cc:160] Initializing Task #26: "fused_nn_max_pool2d_3"
2024-04-29 13:20:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(16), T.int64(16), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(120), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
2024-04-29 13:20:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 13:20:28 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(16), T.int64(16), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(120), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(16), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(16), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:28 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3) - T.int64(1), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3) - T.int64(1), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], T.if_then_else(T.int64(1) <= v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3) and v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3) < T.int64(15) and T.int64(1) <= v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3) and v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3) < T.int64(15), p0[v_ax0, v_ax1, v_ax2 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3) - T.int64(1), v_ax3 + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3) - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 13:20:28 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(120), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(16), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(120), T.int64(14), T.int64(14)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(120), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(16), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(16), ax3 + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(15) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(15), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax4, rv0, rv1 in T.grid(T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 14:04:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 14:04:57 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 14:05:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x53f89e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b32a78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6f54468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3585958)]: 0 failure(s)
2024-04-29 14:05:00 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 14:05:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x53f89e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b32a78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6f54468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3585958)]: 0 failure(s)
2024-04-29 14:05:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x53f89e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b32a78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6f54468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3585958)]: 0 failure(s)
2024-04-29 14:05:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x53f89e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b32a78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6f54468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3585958)]: 0 failure(s)
2024-04-29 14:05:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x53f89e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b32a78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6f54468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3585958)]: 0 failure(s)
2024-04-29 14:05:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9985  0.9953  0.9855  0.9822  0.9704  0.9700  0.9682  0.9655  0.9598  0.9571  0.9552  0.9489  0.9488  0.9458  0.9383  0.9214
[17 : 32]:	0.9149  0.9041  0.8990  0.8851  0.8837  0.8792  0.8772  0.8632  0.8626  0.8533  0.8420  0.8364  0.8321  0.8304  0.8279  0.8257
[33 : 48]:	0.8197  0.8154  0.8041  0.7997  0.7984  0.7981  0.7853  0.7800  0.7778  0.7727  0.7721  0.7666  0.7644  0.7636  0.7616  0.7613
[49 : 64]:	0.7583  0.7525  0.7438  0.7395  0.7377  0.7333  0.7186  0.7168  0.7142  0.7021  0.7012  0.7009  0.7002  0.6945  0.6937  0.6931
2024-04-29 14:05:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 14:05:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #1: GFLOPs: 6.3778. Time: 132.7615 us. Best GFLOPs: 6.3778
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #2: GFLOPs: 13.5794. Time: 62.3533 us. Best GFLOPs: 13.5794
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #3: GFLOPs: 10.5496. Time: 80.2606 us. Best GFLOPs: 13.5794
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #4: GFLOPs: 14.7761. Time: 57.3035 us. Best GFLOPs: 14.7761
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #5: GFLOPs: 18.5551. Time: 45.6327 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #6: GFLOPs: 15.3307. Time: 55.2305 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #7: GFLOPs: 11.8805. Time: 71.2700 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #8: GFLOPs: 13.8167. Time: 61.2822 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #9: GFLOPs: 6.9703. Time: 121.4752 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #10: GFLOPs: 14.2212. Time: 59.5394 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #11: GFLOPs: 7.3816. Time: 114.7063 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #12: GFLOPs: 17.4573. Time: 48.5025 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #13: GFLOPs: 9.1437. Time: 92.6016 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #14: GFLOPs: 11.6537. Time: 72.6570 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #15: GFLOPs: 15.0161. Time: 56.3875 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #16: GFLOPs: 11.9263. Time: 70.9961 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #17: GFLOPs: 17.8295. Time: 47.4898 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #18: GFLOPs: 13.7536. Time: 61.5633 us. Best GFLOPs: 18.5551
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #19: GFLOPs: 21.2279. Time: 39.8871 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #20: GFLOPs: 7.9753. Time: 106.1684 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #21: GFLOPs: 14.6617. Time: 57.7504 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #22: GFLOPs: 11.8326. Time: 71.5583 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #23: GFLOPs: 7.1432. Time: 118.5354 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #24: GFLOPs: 7.7489. Time: 109.2697 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #25: GFLOPs: 14.8113. Time: 57.1672 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #26: GFLOPs: 7.1801. Time: 117.9266 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #27: GFLOPs: 10.6035. Time: 79.8531 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #28: GFLOPs: 17.4866. Time: 48.4211 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #29: GFLOPs: 16.0541. Time: 52.7417 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #30: GFLOPs: 19.6688. Time: 43.0490 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #31: GFLOPs: 13.2057. Time: 64.1176 us. Best GFLOPs: 21.2279
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #32: GFLOPs: 26.2748. Time: 32.2256 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #33: GFLOPs: 11.5926. Time: 73.0397 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #34: GFLOPs: 22.9785. Time: 36.8483 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #35: GFLOPs: 10.7495. Time: 78.7683 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #36: GFLOPs: 5.0795. Time: 166.6934 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #37: GFLOPs: 21.9419. Time: 38.5892 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #38: GFLOPs: 21.6815. Time: 39.0527 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #39: GFLOPs: 10.6274. Time: 79.6736 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #40: GFLOPs: 15.6118. Time: 54.2358 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #41: GFLOPs: 16.1186. Time: 52.5308 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #42: GFLOPs: 13.1919. Time: 64.1849 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #43: GFLOPs: 7.3792. Time: 114.7438 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #44: GFLOPs: 11.0788. Time: 76.4274 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #45: GFLOPs: 12.2697. Time: 69.0093 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #46: GFLOPs: 14.4297. Time: 58.6789 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #47: GFLOPs: 9.9284. Time: 85.2825 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #48: GFLOPs: 6.4203. Time: 131.8807 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #49: GFLOPs: 22.1344. Time: 38.2536 us. Best GFLOPs: 26.2748
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #50: GFLOPs: 40.3316. Time: 20.9940 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #51: GFLOPs: 14.6291. Time: 57.8791 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #52: GFLOPs: 18.8322. Time: 44.9613 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #53: GFLOPs: 22.0475. Time: 38.4044 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #54: GFLOPs: 12.7164. Time: 66.5851 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #55: GFLOPs: 18.7264. Time: 45.2153 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #56: GFLOPs: 7.4659. Time: 113.4124 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #57: GFLOPs: 11.6944. Time: 72.4039 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #58: GFLOPs: 24.2582. Time: 34.9045 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #59: GFLOPs: 7.3709. Time: 114.8739 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #60: GFLOPs: 18.6528. Time: 45.3936 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #61: GFLOPs: 18.4516. Time: 45.8887 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #62: GFLOPs: 14.0215. Time: 60.3873 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #63: GFLOPs: 19.5959. Time: 43.2089 us. Best GFLOPs: 40.3316
2024-04-29 15:05:22 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_max_pool2d_3] Trial #64: GFLOPs: 24.3045. Time: 34.8380 us. Best GFLOPs: 40.3316
